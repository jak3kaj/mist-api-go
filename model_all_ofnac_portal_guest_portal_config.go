/*
 * Mist API
 *
 * > Version: **2409.1.9** > > Date: **September 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates] (https://www.juniper.net/documentation/us/en/software/mist/api/http/getting-started/how-to-get-started)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 
 *
 * API version: 2409.1.9
 * Contact: tmunzer@juniper.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

type AllOfnacPortalGuestPortalConfig struct {
	// amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
	AmazonClientId string `json:"amazon_client_id,omitempty"`
	// amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
	AmazonClientSecret string `json:"amazon_client_secret,omitempty"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	AmazonEmailDomains []string `json:"amazon_email_domains,omitempty"`
	// whether amazon is enabled as a login method
	AmazonEnabled bool `json:"amazon_enabled,omitempty"`
	// interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
	AmazonExpire float64 `json:"amazon_expire,omitempty"`
	Auth *any `json:"auth,omitempty"`
	// Required if `azure_enabled`==`true`. Azure active directory app client id
	AzureClientId string `json:"azure_client_id,omitempty"`
	// Required if `azure_enabled`==`true`. Azure active directory app client secret
	AzureClientSecret string `json:"azure_client_secret,omitempty"`
	// whether Azure Active Directory is enabled as a login method
	AzureEnabled bool `json:"azure_enabled,omitempty"`
	// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
	AzureExpire float64 `json:"azure_expire,omitempty"`
	// Required if `azure_enabled`==`true`. Azure active directory tenant id.
	AzureTenantId string `json:"azure_tenant_id,omitempty"`
	// when `sms_provider`==`broadnet`
	BroadnetPassword string `json:"broadnet_password,omitempty"`
	// when `sms_provider`==`broadnet`
	BroadnetSid string `json:"broadnet_sid,omitempty"`
	// when `sms_provider`==`broadnet`
	BroadnetUserId string `json:"broadnet_user_id,omitempty"`
	// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
	BypassWhenCloudDown bool `json:"bypass_when_cloud_down,omitempty"`
	// when `sms_provider`==`clickatell`
	ClickatellApiKey string `json:"clickatell_api_key,omitempty"`
	// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
	CrossSite bool `json:"cross_site,omitempty"`
	// whether email (access code verification) is enabled as a login method
	EmailEnabled bool `json:"email_enabled,omitempty"`
	// whether guest portal is enabled
	Enabled bool `json:"enabled,omitempty"`
	// how long to remain authorized, in minutes
	Expire float64 `json:"expire,omitempty"`
	// external portal URL (e.g. https://host/url) where we can append our query parameters to
	ExternalPortalUrl string `json:"external_portal_url,omitempty"`
	// Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
	FacebookClientId string `json:"facebook_client_id,omitempty"`
	// Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
	FacebookClientSecret string `json:"facebook_client_secret,omitempty"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	FacebookEmailDomains []string `json:"facebook_email_domains,omitempty"`
	// whether facebook is enabled as a login method
	FacebookEnabled bool `json:"facebook_enabled,omitempty"`
	// interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
	FacebookExpire float64 `json:"facebook_expire,omitempty"`
	// whether to forward the user to another URL after authorized
	Forward bool `json:"forward,omitempty"`
	// the URL to forward the user to
	ForwardUrl string `json:"forward_url,omitempty"`
	// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
	GoogleClientId string `json:"google_client_id,omitempty"`
	// Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
	GoogleClientSecret string `json:"google_client_secret,omitempty"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	GoogleEmailDomains []string `json:"google_email_domains,omitempty"`
	// whether google is enabled as login method
	GoogleEnabled bool `json:"google_enabled,omitempty"`
	// interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
	GoogleExpire float64 `json:"google_expire,omitempty"`
	// when `sms_provider`==`gupshup`
	GupshupPassword string `json:"gupshup_password,omitempty"`
	// when `sms_provider`==`gupshup`
	GupshupUserid string `json:"gupshup_userid,omitempty"`
	// microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
	MicrosoftClientId string `json:"microsoft_client_id,omitempty"`
	// microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
	MicrosoftClientSecret string `json:"microsoft_client_secret,omitempty"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	MicrosoftEmailDomains []string `json:"microsoft_email_domains,omitempty"`
	// whether microsoft 365 is enabled as a login method
	MicrosoftEnabled bool `json:"microsoft_enabled,omitempty"`
	// interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
	MicrosoftExpire float64 `json:"microsoft_expire,omitempty"`
	// whether password is enabled
	PassphraseEnabled bool `json:"passphrase_enabled,omitempty"`
	// interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
	PassphraseExpire float64 `json:"passphrase_expire,omitempty"`
	// passphrase
	Password string `json:"password,omitempty"`
	// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
	PredefinedSponsorsEnabled bool `json:"predefined_sponsors_enabled,omitempty"`
	// whether to hide sponsor’s email from list of sponsors
	PredefinedSponsorsHideEmail bool `json:"predefined_sponsors_hide_email,omitempty"`
	Privacy bool `json:"privacy,omitempty"`
	// when `sms_provider`==`puzzel`
	PuzzelPassword string `json:"puzzel_password,omitempty"`
	// when `sms_provider`==`puzzel`
	PuzzelServiceId string `json:"puzzel_service_id,omitempty"`
	// when `sms_provider`==`puzzel`
	PuzzelUsername string `json:"puzzel_username,omitempty"`
	SmsMessageFormat string `json:"smsMessageFormat,omitempty"`
	// whether sms is enabled as a login method
	SmsEnabled bool `json:"sms_enabled,omitempty"`
	// interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
	SmsExpire float64 `json:"sms_expire,omitempty"`
	SmsProvider *any `json:"sms_provider,omitempty"`
	// whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
	SponsorAutoApprove bool `json:"sponsor_auto_approve,omitempty"`
	// list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
	SponsorEmailDomains []string `json:"sponsor_email_domains,omitempty"`
	// whether sponsor is enabled
	SponsorEnabled bool `json:"sponsor_enabled,omitempty"`
	// interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
	SponsorExpire float64 `json:"sponsor_expire,omitempty"`
	// how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
	SponsorLinkValidityDuration string `json:"sponsor_link_validity_duration,omitempty"`
	// whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
	SponsorNotifyAll bool `json:"sponsor_notify_all,omitempty"`
	// if enabled, guest will get email about sponsor's action (approve/deny)
	SponsorStatusNotify bool `json:"sponsor_status_notify,omitempty"`
	Sponsors *any `json:"sponsors,omitempty"`
	// if `wlan_portal_auth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
	SsoDefaultRole string `json:"sso_default_role,omitempty"`
	// if `wlan_portal_auth`==`sso`
	SsoForcedRole string `json:"sso_forced_role,omitempty"`
	// if `wlan_portal_auth`==`sso`, IDP Cert (used to verify the signed response)
	SsoIdpCert string `json:"sso_idp_cert,omitempty"`
	SsoIdpSignAlgo *any `json:"sso_idp_sign_algo,omitempty"`
	// if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL
	SsoIdpSsoUrl string `json:"sso_idp_sso_url,omitempty"`
	// if `wlan_portal_auth`==`sso`, IDP issuer URL
	SsoIssuer string `json:"sso_issuer,omitempty"`
	SsoNameidFormat *any `json:"sso_nameid_format,omitempty"`
	// when `sms_provider`==`telstra`, Client ID provided by Telstra
	TelstraClientId string `json:"telstra_client_id,omitempty"`
	// when `sms_provider`==`telstra`, Client secret provided by Telstra
	TelstraClientSecret string `json:"telstra_client_secret,omitempty"`
	// when `sms_provider`==`twilio`, Auth token account with twilio account
	TwilioAuthToken string `json:"twilio_auth_token,omitempty"`
	// when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
	TwilioPhoneNumber string `json:"twilio_phone_number,omitempty"`
	// when `sms_provider`==`twilio`, Account SID provided by Twilio
	TwilioSid string `json:"twilio_sid,omitempty"`
}
