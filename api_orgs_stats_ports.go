
/*
 * Mist API
 *
 * > Version: **2409.1.9** > > Date: **September 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates] (https://www.juniper.net/documentation/us/en/software/mist/api/http/getting-started/how-to-get-started)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 
 *
 * API version: 2409.1.9
 * Contact: tmunzer@juniper.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package mist

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type OrgsStatsPortsApiService service
/*
OrgsStatsPortsApiService countOrgSwitchPorts
Count by Distinct Attributes of Switch/Gateway Ports
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId
 * @param optional nil or *OrgsStatsPortsApiCountOrgSwitchPortsOpts - Optional Parameters:
     * @param "Distinct" (optional.Interface of OrgSwitchPortCountDistinct) - 
     * @param "FullDuplex" (optional.Bool) -  indicates full or half duplex
     * @param "Mac" (optional.String) -  device identifier
     * @param "NeighborMac" (optional.String) -  Chassis identifier of the chassis type listed
     * @param "NeighborPortDesc" (optional.String) -  Description supplied by the system on the interface E.g. “GigabitEthernet2/0/39”
     * @param "NeighborSystemName" (optional.String) -  Name supplied by the system on the interface E.g. neighbor system name E.g. “Kumar-Acc-SW.mist.local”
     * @param "PoeDisabled" (optional.Bool) -  is the POE configured not be disabled.
     * @param "PoeMode" (optional.String) -  poe mode depending on class E.g. “802.3at”
     * @param "PoeOn" (optional.Bool) -  is the device attached to POE
     * @param "PortId" (optional.String) -  interface name
     * @param "PortMac" (optional.String) -  interface mac address
     * @param "PowerDraw" (optional.Float64) -  Amount of power being used by the interface at the time the command is executed. Unit in watts.
     * @param "TxPkts" (optional.Int32) -  Output packets
     * @param "RxPkts" (optional.Int32) -  Input packets
     * @param "RxBytes" (optional.Int32) -  Input bytes
     * @param "TxBps" (optional.Int32) -  Output rate
     * @param "RxBps" (optional.Int32) -  Input rate
     * @param "TxMcastPkts" (optional.Int32) -  Multicast output packets
     * @param "TxBcastPkts" (optional.Int32) -  Broadcast output packets
     * @param "RxMcastPkts" (optional.Int32) -  Multicast input packets
     * @param "RxBcastPkts" (optional.Int32) -  Broadcast input packets
     * @param "Speed" (optional.Int32) -  port speed
     * @param "StpState" (optional.Interface of StpState1) -  if &#x60;up&#x60;&#x3D;&#x3D;&#x60;true&#x60;
     * @param "StpRole" (optional.Interface of StpRole1) -  if &#x60;up&#x60;&#x3D;&#x3D;&#x60;true&#x60;
     * @param "AuthState" (optional.Interface of AuthState1) -  if &#x60;up&#x60;&#x3D;&#x3D;&#x60;true&#x60;
     * @param "Up" (optional.Bool) -  indicates if interface is up
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
     * @param "Limit" (optional.Int32) - 
     * @param "Page" (optional.Int32) - 
@return InlineResponse20016
*/

type OrgsStatsPortsApiCountOrgSwitchPortsOpts struct {
    Distinct optional.Interface
    FullDuplex optional.Bool
    Mac optional.String
    NeighborMac optional.String
    NeighborPortDesc optional.String
    NeighborSystemName optional.String
    PoeDisabled optional.Bool
    PoeMode optional.String
    PoeOn optional.Bool
    PortId optional.String
    PortMac optional.String
    PowerDraw optional.Float64
    TxPkts optional.Int32
    RxPkts optional.Int32
    RxBytes optional.Int32
    TxBps optional.Int32
    RxBps optional.Int32
    TxMcastPkts optional.Int32
    TxBcastPkts optional.Int32
    RxMcastPkts optional.Int32
    RxBcastPkts optional.Int32
    Speed optional.Int32
    StpState optional.Interface
    StpRole optional.Interface
    AuthState optional.Interface
    Up optional.Bool
    Start optional.Int32
    End optional.Int32
    Duration optional.String
    Limit optional.Int32
    Page optional.Int32
}

func (a *OrgsStatsPortsApiService) CountOrgSwitchPorts(ctx context.Context, orgId string, localVarOptionals *OrgsStatsPortsApiCountOrgSwitchPortsOpts) (InlineResponse20016, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20016
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/orgs/{org_id}/stats/switch_ports/count"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", fmt.Sprintf("%v", orgId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Distinct.IsSet() {
		localVarQueryParams.Add("distinct", parameterToString(localVarOptionals.Distinct.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FullDuplex.IsSet() {
		localVarQueryParams.Add("full_duplex", parameterToString(localVarOptionals.FullDuplex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mac.IsSet() {
		localVarQueryParams.Add("mac", parameterToString(localVarOptionals.Mac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeighborMac.IsSet() {
		localVarQueryParams.Add("neighbor_mac", parameterToString(localVarOptionals.NeighborMac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeighborPortDesc.IsSet() {
		localVarQueryParams.Add("neighbor_port_desc", parameterToString(localVarOptionals.NeighborPortDesc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeighborSystemName.IsSet() {
		localVarQueryParams.Add("neighbor_system_name", parameterToString(localVarOptionals.NeighborSystemName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoeDisabled.IsSet() {
		localVarQueryParams.Add("poe_disabled", parameterToString(localVarOptionals.PoeDisabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoeMode.IsSet() {
		localVarQueryParams.Add("poe_mode", parameterToString(localVarOptionals.PoeMode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoeOn.IsSet() {
		localVarQueryParams.Add("poe_on", parameterToString(localVarOptionals.PoeOn.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PortId.IsSet() {
		localVarQueryParams.Add("port_id", parameterToString(localVarOptionals.PortId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PortMac.IsSet() {
		localVarQueryParams.Add("port_mac", parameterToString(localVarOptionals.PortMac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PowerDraw.IsSet() {
		localVarQueryParams.Add("power_draw", parameterToString(localVarOptionals.PowerDraw.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxPkts.IsSet() {
		localVarQueryParams.Add("tx_pkts", parameterToString(localVarOptionals.TxPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxPkts.IsSet() {
		localVarQueryParams.Add("rx_pkts", parameterToString(localVarOptionals.RxPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxBytes.IsSet() {
		localVarQueryParams.Add("rx_bytes", parameterToString(localVarOptionals.RxBytes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxBps.IsSet() {
		localVarQueryParams.Add("tx_bps", parameterToString(localVarOptionals.TxBps.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxBps.IsSet() {
		localVarQueryParams.Add("rx_bps", parameterToString(localVarOptionals.RxBps.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxMcastPkts.IsSet() {
		localVarQueryParams.Add("tx_mcast_pkts", parameterToString(localVarOptionals.TxMcastPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxBcastPkts.IsSet() {
		localVarQueryParams.Add("tx_bcast_pkts", parameterToString(localVarOptionals.TxBcastPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxMcastPkts.IsSet() {
		localVarQueryParams.Add("rx_mcast_pkts", parameterToString(localVarOptionals.RxMcastPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxBcastPkts.IsSet() {
		localVarQueryParams.Add("rx_bcast_pkts", parameterToString(localVarOptionals.RxBcastPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Speed.IsSet() {
		localVarQueryParams.Add("speed", parameterToString(localVarOptionals.Speed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StpState.IsSet() {
		localVarQueryParams.Add("stp_state", parameterToString(localVarOptionals.StpState.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StpRole.IsSet() {
		localVarQueryParams.Add("stp_role", parameterToString(localVarOptionals.StpRole.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthState.IsSet() {
		localVarQueryParams.Add("auth_state", parameterToString(localVarOptionals.AuthState.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Up.IsSet() {
		localVarQueryParams.Add("up", parameterToString(localVarOptionals.Up.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
OrgsStatsPortsApiService searchOrgSwOrGwPorts
Search Switch / Gateway Ports
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId
 * @param optional nil or *OrgsStatsPortsApiSearchOrgSwOrGwPortsOpts - Optional Parameters:
     * @param "FullDuplex" (optional.Bool) -  indicates full or half duplex
     * @param "Mac" (optional.String) -  device identifier
     * @param "NeighborMac" (optional.String) -  Chassis identifier of the chassis type listed
     * @param "NeighborPortDesc" (optional.String) -  Description supplied by the system on the interface E.g. “GigabitEthernet2/0/39”
     * @param "NeighborSystemName" (optional.String) -  Name supplied by the system on the interface E.g. neighbor system name E.g. “Kumar-Acc-SW.mist.local”
     * @param "PoeDisabled" (optional.Bool) -  is the POE configured not be disabled.
     * @param "PoeMode" (optional.String) -  poe mode depending on class E.g. “802.3at”
     * @param "PoeOn" (optional.Bool) -  is the device attached to POE
     * @param "PortId" (optional.String) -  interface name
     * @param "PortMac" (optional.String) -  interface mac address
     * @param "PowerDraw" (optional.Float64) -  Amount of power being used by the interface at the time the command is executed. Unit in watts.
     * @param "TxPkts" (optional.Int32) -  Output packets
     * @param "RxPkts" (optional.Int32) -  Input packets
     * @param "RxBytes" (optional.Int32) -  Input bytes
     * @param "TxBps" (optional.Int32) -  Output rate
     * @param "RxBps" (optional.Int32) -  Input rate
     * @param "TxErrors" (optional.Int32) -  Output errors
     * @param "RxErrors" (optional.Int32) -  Input errors
     * @param "TxMcastPkts" (optional.Int32) -  Multicast output packets
     * @param "TxBcastPkts" (optional.Int32) -  Broadcast output packets
     * @param "RxMcastPkts" (optional.Int32) -  Multicast input packets
     * @param "RxBcastPkts" (optional.Int32) -  Broadcast input packets
     * @param "Speed" (optional.Int32) -  port speed
     * @param "MacLimit" (optional.Int32) -  Limit on number of dynamically learned macs
     * @param "MacCount" (optional.Int32) -  Number of mac addresses in the forwarding table
     * @param "Up" (optional.Bool) -  indicates if interface is up
     * @param "StpState" (optional.Interface of StpState) -  if &#x60;up&#x60;&#x3D;&#x3D;&#x60;true&#x60;
     * @param "StpRole" (optional.Interface of StpRole) -  if &#x60;up&#x60;&#x3D;&#x3D;&#x60;true&#x60;
     * @param "AuthState" (optional.Interface of AuthState) -  if &#x60;up&#x60;&#x3D;&#x3D;&#x60;true&#x60; &amp;&amp; has Authenticator role
     * @param "Limit" (optional.Int32) - 
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
@return ResponsePortStatsSearch
*/

type OrgsStatsPortsApiSearchOrgSwOrGwPortsOpts struct {
    FullDuplex optional.Bool
    Mac optional.String
    NeighborMac optional.String
    NeighborPortDesc optional.String
    NeighborSystemName optional.String
    PoeDisabled optional.Bool
    PoeMode optional.String
    PoeOn optional.Bool
    PortId optional.String
    PortMac optional.String
    PowerDraw optional.Float64
    TxPkts optional.Int32
    RxPkts optional.Int32
    RxBytes optional.Int32
    TxBps optional.Int32
    RxBps optional.Int32
    TxErrors optional.Int32
    RxErrors optional.Int32
    TxMcastPkts optional.Int32
    TxBcastPkts optional.Int32
    RxMcastPkts optional.Int32
    RxBcastPkts optional.Int32
    Speed optional.Int32
    MacLimit optional.Int32
    MacCount optional.Int32
    Up optional.Bool
    StpState optional.Interface
    StpRole optional.Interface
    AuthState optional.Interface
    Limit optional.Int32
    Start optional.Int32
    End optional.Int32
    Duration optional.String
}

func (a *OrgsStatsPortsApiService) SearchOrgSwOrGwPorts(ctx context.Context, orgId string, localVarOptionals *OrgsStatsPortsApiSearchOrgSwOrGwPortsOpts) (ResponsePortStatsSearch, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponsePortStatsSearch
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/orgs/{org_id}/stats/ports/search"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", fmt.Sprintf("%v", orgId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.FullDuplex.IsSet() {
		localVarQueryParams.Add("full_duplex", parameterToString(localVarOptionals.FullDuplex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mac.IsSet() {
		localVarQueryParams.Add("mac", parameterToString(localVarOptionals.Mac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeighborMac.IsSet() {
		localVarQueryParams.Add("neighbor_mac", parameterToString(localVarOptionals.NeighborMac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeighborPortDesc.IsSet() {
		localVarQueryParams.Add("neighbor_port_desc", parameterToString(localVarOptionals.NeighborPortDesc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeighborSystemName.IsSet() {
		localVarQueryParams.Add("neighbor_system_name", parameterToString(localVarOptionals.NeighborSystemName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoeDisabled.IsSet() {
		localVarQueryParams.Add("poe_disabled", parameterToString(localVarOptionals.PoeDisabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoeMode.IsSet() {
		localVarQueryParams.Add("poe_mode", parameterToString(localVarOptionals.PoeMode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoeOn.IsSet() {
		localVarQueryParams.Add("poe_on", parameterToString(localVarOptionals.PoeOn.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PortId.IsSet() {
		localVarQueryParams.Add("port_id", parameterToString(localVarOptionals.PortId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PortMac.IsSet() {
		localVarQueryParams.Add("port_mac", parameterToString(localVarOptionals.PortMac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PowerDraw.IsSet() {
		localVarQueryParams.Add("power_draw", parameterToString(localVarOptionals.PowerDraw.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxPkts.IsSet() {
		localVarQueryParams.Add("tx_pkts", parameterToString(localVarOptionals.TxPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxPkts.IsSet() {
		localVarQueryParams.Add("rx_pkts", parameterToString(localVarOptionals.RxPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxBytes.IsSet() {
		localVarQueryParams.Add("rx_bytes", parameterToString(localVarOptionals.RxBytes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxBps.IsSet() {
		localVarQueryParams.Add("tx_bps", parameterToString(localVarOptionals.TxBps.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxBps.IsSet() {
		localVarQueryParams.Add("rx_bps", parameterToString(localVarOptionals.RxBps.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxErrors.IsSet() {
		localVarQueryParams.Add("tx_errors", parameterToString(localVarOptionals.TxErrors.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxErrors.IsSet() {
		localVarQueryParams.Add("rx_errors", parameterToString(localVarOptionals.RxErrors.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxMcastPkts.IsSet() {
		localVarQueryParams.Add("tx_mcast_pkts", parameterToString(localVarOptionals.TxMcastPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TxBcastPkts.IsSet() {
		localVarQueryParams.Add("tx_bcast_pkts", parameterToString(localVarOptionals.TxBcastPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxMcastPkts.IsSet() {
		localVarQueryParams.Add("rx_mcast_pkts", parameterToString(localVarOptionals.RxMcastPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RxBcastPkts.IsSet() {
		localVarQueryParams.Add("rx_bcast_pkts", parameterToString(localVarOptionals.RxBcastPkts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Speed.IsSet() {
		localVarQueryParams.Add("speed", parameterToString(localVarOptionals.Speed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MacLimit.IsSet() {
		localVarQueryParams.Add("mac_limit", parameterToString(localVarOptionals.MacLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MacCount.IsSet() {
		localVarQueryParams.Add("mac_count", parameterToString(localVarOptionals.MacCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Up.IsSet() {
		localVarQueryParams.Add("up", parameterToString(localVarOptionals.Up.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StpState.IsSet() {
		localVarQueryParams.Add("stp_state", parameterToString(localVarOptionals.StpState.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StpRole.IsSet() {
		localVarQueryParams.Add("stp_role", parameterToString(localVarOptionals.StpRole.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthState.IsSet() {
		localVarQueryParams.Add("auth_state", parameterToString(localVarOptionals.AuthState.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponsePortStatsSearch
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
