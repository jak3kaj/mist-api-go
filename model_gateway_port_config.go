/*
 * Mist API
 *
 * > Version: **2409.1.9** > > Date: **September 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates] (https://www.juniper.net/documentation/us/en/software/mist/api/http/getting-started/how-to-get-started)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 
 *
 * API version: 2409.1.9
 * Contact: tmunzer@juniper.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// Gateway port config
type GatewayPortConfig struct {
	// if `aggregated`==`true`. To disable LCP support for the AE interface
	AeDisableLacp bool `json:"ae_disable_lacp,omitempty"`
	// if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
	AeIdx string `json:"ae_idx,omitempty"`
	// For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability.\\n Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end\\n Note: Turning this on will enable force-up on one of the interfaces in the bundle only
	AeLacpForceUp bool `json:"ae_lacp_force_up,omitempty"`
	Aggregated bool `json:"aggregated,omitempty"`
	// if want to generate port up/down alarm, set it to true
	Critical bool `json:"critical,omitempty"`
	Description string `json:"description,omitempty"`
	DisableAutoneg bool `json:"disable_autoneg,omitempty"`
	// port admin up (true) / down (false)
	Disabled bool `json:"disabled,omitempty"`
	DslType *AllOfgatewayPortConfigDslType `json:"dsl_type,omitempty"`
	// if `wan_type`==`dsl` 16 bit int
	DslVci int32 `json:"dsl_vci,omitempty"`
	// if `wan_type`==`dsl` 8 bit int
	DslVpi int32 `json:"dsl_vpi,omitempty"`
	Duplex *AllOfgatewayPortConfigDuplex `json:"duplex,omitempty"`
	IpConfig *AllOfgatewayPortConfigIpConfig `json:"ip_config,omitempty"`
	// if `wan_type`==`lte`
	LteApn string `json:"lte_apn,omitempty"`
	LteAuth *AllOfgatewayPortConfigLteAuth `json:"lte_auth,omitempty"`
	LteBackup bool `json:"lte_backup,omitempty"`
	// if `wan_type`==`lte`
	LtePassword string `json:"lte_password,omitempty"`
	// if `wan_type`==`lte`
	LteUsername string `json:"lte_username,omitempty"`
	Mtu int32 `json:"mtu,omitempty"`
	// name that we'll use to derive config
	Name string `json:"name,omitempty"`
	// if `usage`==`lan`
	Networks []string `json:"networks,omitempty"`
	// for Q-in-Q
	OuterVlanId int32 `json:"outer_vlan_id,omitempty"`
	PoeDisabled bool `json:"poe_disabled,omitempty"`
	// if `usage`==`lan`
	PortNetwork string `json:"port_network,omitempty"`
	// whether to preserve dscp when sending traffic over VPN (SSR-only)
	PreserveDscp bool `json:"preserve_dscp,omitempty"`
	// if HA mode
	Redundant bool `json:"redundant,omitempty"`
	// if HA mode
	RethIdx int32 `json:"reth_idx,omitempty"`
	// if HA mode
	RethNode string `json:"reth_node,omitempty"`
	// SSR only - supporting vlan-based redundancy (matching the size of `networks`)
	RethNodes []string `json:"reth_nodes,omitempty"`
	Speed string `json:"speed,omitempty"`
	// when SSR is running as VM, this is required on certain hosting platforms
	SsrNoVirtualMac bool `json:"ssr_no_virtual_mac,omitempty"`
	// for SSR only
	SvrPortRange string `json:"svr_port_range,omitempty"`
	TrafficShaping *GatewayTrafficShaping `json:"traffic_shaping,omitempty"`
	Usage *AllOfgatewayPortConfigUsage `json:"usage"`
	// if WAN interface is on a VLAN
	VlanId int32 `json:"vlan_id,omitempty"`
	VpnPaths map[string]GatewayPortVpnPath `json:"vpn_paths,omitempty"`
	WanArpPolicer *AllOfgatewayPortConfigWanArpPolicer `json:"wan_arp_policer,omitempty"`
	// optional, if spoke should reach this port by a different IP
	WanExtIp string `json:"wan_ext_ip,omitempty"`
	WanSourceNat *AllOfgatewayPortConfigWanSourceNat `json:"wan_source_nat,omitempty"`
	WanType *AllOfgatewayPortConfigWanType `json:"wan_type,omitempty"`
}
