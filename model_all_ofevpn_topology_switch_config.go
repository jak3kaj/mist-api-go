/*
 * Mist API
 *
 * > Version: **2409.1.9** > > Date: **September 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates] (https://www.juniper.net/documentation/us/en/software/mist/api/http/getting-started/how-to-get-started)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 
 *
 * API version: 2409.1.9
 * Contact: tmunzer@juniper.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package mist

type AllOfevpnTopologySwitchConfig struct {
	AclPolicies []AclPolicy `json:"acl_policies,omitempty"`
	// ACL Tags to identify traffic source or destination. Key name is the tag name
	AclTags map[string]AclTag `json:"acl_tags,omitempty"`
	// additional CLI commands to append to the generated Junos config  **Note**: no check is done
	AdditionalConfigCmds []string `json:"additional_config_cmds,omitempty"`
	CreatedTime float64 `json:"created_time,omitempty"`
	DeviceprofileId string `json:"deviceprofile_id,omitempty"`
	DhcpSnooping *DhcpSnooping `json:"dhcp_snooping,omitempty"`
	DhcpdConfig *map[string]SwitchDhcpdConfigProperty `json:"dhcpd_config,omitempty"`
	// for a claimed switch, we control the configs by default. This option (disables the behavior)
	DisableAutoConfig bool `json:"disable_auto_config,omitempty"`
	// Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
	DnsServers []string `json:"dns_servers,omitempty"`
	// Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
	DnsSuffix []string `json:"dns_suffix,omitempty"`
	EvpnConfig *any `json:"evpn_config,omitempty"`
	ExtraRoutes map[string]ExtraRoute `json:"extra_routes,omitempty"`
	// Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")
	ExtraRoutes6 map[string]ExtraRoute6 `json:"extra_routes6,omitempty"`
	Id string `json:"id,omitempty"`
	Image1Url string `json:"image1_url,omitempty"`
	Image2Url string `json:"image2_url,omitempty"`
	Image3Url string `json:"image3_url,omitempty"`
	IpConfig *any `json:"ip_config,omitempty"`
	// device MAC address
	Mac string `json:"mac,omitempty"`
	// for an adopted switch, we donâ€™t overwrite their existing configs automatically
	Managed bool `json:"managed,omitempty"`
	// map where the device belongs to
	MapId string `json:"map_id,omitempty"`
	MistNac *any `json:"mist_nac,omitempty"`
	// device Model
	Model string `json:"model,omitempty"`
	ModifiedTime float64 `json:"modified_time,omitempty"`
	Name string `json:"name,omitempty"`
	// Property key is network name
	Networks map[string]SwitchNetwork `json:"networks,omitempty"`
	Notes string `json:"notes,omitempty"`
	// list of NTP servers specific to this device. By default, those in Site Settings will be used
	NtpServers []string `json:"ntp_servers,omitempty"`
	OobIpConfig *any `json:"oob_ip_config,omitempty"`
	OrgId string `json:"org_id,omitempty"`
	// Junos OSPF areas
	OspfAreas map[string]OspfArea `json:"ospf_areas,omitempty"`
	// Property key is the network name
	OtherIpConfigs map[string]JunosOtherIpConfig `json:"other_ip_configs,omitempty"`
	// Property key is the port name or range (e.g. \"ge-0/0/0-10\")
	PortConfig map[string]JunosPortConfig `json:"port_config,omitempty"`
	// Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
	PortMirroring map[string]SwitchPortMirroringProperty `json:"port_mirroring,omitempty"`
	PortUsages map[string]SwitchPortUsage `json:"port_usages,omitempty"`
	RadiusConfig *any `json:"radius_config,omitempty"`
	RemoteSyslog *RemoteSyslog `json:"remote_syslog,omitempty"`
	Role string `json:"role,omitempty"`
	// used for OSPF / BGP / EVPN
	RouterId string `json:"router_id,omitempty"`
	// device Serial
	Serial string `json:"serial,omitempty"`
	SiteId string `json:"site_id,omitempty"`
	SnmpConfig *SnmpConfig `json:"snmp_config,omitempty"`
	StpConfig *SwitchStpConfig `json:"stp_config,omitempty"`
	SwitchMgmt *any `json:"switch_mgmt,omitempty"`
	// Device Type. enum: `switch`
	Type_ string `json:"type"`
	// whether to use it for snmp / syslog / tacplus / radius
	UseRouterIdAsSourceIp bool `json:"use_router_id_as_source_ip,omitempty"`
	// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
	Vars map[string]string `json:"vars,omitempty"`
	VirtualChassis *any `json:"virtual_chassis,omitempty"`
	VrfConfig *VrfConfig `json:"vrf_config,omitempty"`
	// Property key is the network name
	VrfInstances map[string]SwitchVrfInstance `json:"vrf_instances,omitempty"`
	VrrpConfig *any `json:"vrrp_config,omitempty"`
	// x in pixel
	X float64 `json:"x,omitempty"`
	// y in pixel
	Y float64 `json:"y,omitempty"`
}
