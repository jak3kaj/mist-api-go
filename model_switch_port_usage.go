/*
 * Mist API
 *
 * > Version: **2409.1.9** > > Date: **September 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates] (https://www.juniper.net/documentation/us/en/software/mist/api/http/getting-started/how-to-get-started)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 
 *
 * API version: 2409.1.9
 * Contact: tmunzer@juniper.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package mist

// Junos port usages
type SwitchPortUsage struct {
	// Only if `mode`==`trunk` whether to trunk all network/vlans
	AllNetworks bool `json:"all_networks,omitempty"`
	// Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.  When it is not defined, it means using the systemâ€™s default setting which depends on whether the port is a access or trunk port.
	AllowDhcpd bool `json:"allow_dhcpd,omitempty"`
	// Only if `mode`!=`dynamic`
	AllowMultipleSupplicants bool `json:"allow_multiple_supplicants,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
	BypassAuthWhenServerDown bool `json:"bypass_auth_when_server_down,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
	BypassAuthWhenServerDownForUnkonwnClient bool `json:"bypass_auth_when_server_down_for_unkonwn_client,omitempty"`
	// Only if `mode`!=`dynamic`
	Description string `json:"description,omitempty"`
	// Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
	DisableAutoneg bool `json:"disable_autoneg,omitempty"`
	// Only if `mode`!=`dynamic` whether the port is disabled
	Disabled bool `json:"disabled,omitempty"`
	Duplex *AllOfswitchPortUsageDuplex `json:"duplex,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
	DynamicVlanNetworks []string `json:"dynamic_vlan_networks,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
	EnableMacAuth bool `json:"enable_mac_auth,omitempty"`
	// Only if `mode`!=`dynamic`
	EnableQos bool `json:"enable_qos,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
	GuestNetwork string `json:"guest_network,omitempty"`
	// Only if `mode`!=`dynamic` inter_switch_link is used together with \"isolation\" under networks NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
	InterSwitchLink bool `json:"inter_switch_link,omitempty"`
	// Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
	MacAuthOnly bool `json:"mac_auth_only,omitempty"`
	// Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.
	MacAuthPreferred bool `json:"mac_auth_preferred,omitempty"`
	MacAuthProtocol *AllOfswitchPortUsageMacAuthProtocol `json:"mac_auth_protocol,omitempty"`
	// Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
	MacLimit int32 `json:"mac_limit,omitempty"`
	Mode *AllOfswitchPortUsageMode `json:"mode,omitempty"`
	// Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
	Mtu int32 `json:"mtu,omitempty"`
	// Only if `mode`==`trunk`, the list of network/vlans
	Networks []string `json:"networks,omitempty"`
	// Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
	PersistMac bool `json:"persist_mac,omitempty"`
	// Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
	PoeDisabled bool `json:"poe_disabled,omitempty"`
	PortAuth *AllOfswitchPortUsagePortAuth `json:"port_auth,omitempty"`
	// Only if `mode`!=`dynamic` native network/vlan for untagged traffic
	PortNetwork string `json:"port_network,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
	ReauthInterval int32 `json:"reauth_interval,omitempty"`
	ResetDefaultWhen *AllOfswitchPortUsageResetDefaultWhen `json:"reset_default_when,omitempty"`
	// Only if `mode`==`dynamic`
	Rules []SwitchPortUsageDynamicRule `json:"rules,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan
	ServerFailNetwork string `json:"server_fail_network,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
	ServerRejectNetwork string `json:"server_reject_network,omitempty"`
	// Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
	Speed string `json:"speed,omitempty"`
	StormControl *AllOfswitchPortUsageStormControl `json:"storm_control,omitempty"`
	// Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
	StpEdge bool `json:"stp_edge,omitempty"`
	StpNoRootPort bool `json:"stp_no_root_port,omitempty"`
	StpP2p bool `json:"stp_p2p,omitempty"`
	// Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
	VoipNetwork string `json:"voip_network,omitempty"`
}
