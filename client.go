/*
 * Mist API
 *
 * > Version: **2409.1.9** > > Date: **September 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates] (https://www.juniper.net/documentation/us/en/software/mist/api/http/getting-started/how-to-get-started)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 
 *
 * API version: 2409.1.9
 * Contact: tmunzer@juniper.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	"golang.org/x/oauth2"
)

var (
	jsonCheck = regexp.MustCompile("(?i:[application|text]/json)")
	xmlCheck  = regexp.MustCompile("(?i:[application|text]/xml)")
)

// APIClient manages communication with the Mist API API v2409.1.9
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg    *Configuration
	common service // Reuse a single struct instead of allocating one for each service on the heap.

	// API Services

	AdminsApi *AdminsApiService

	AdminsLoginApi *AdminsLoginApiService

	AdminsLoginOAuth2Api *AdminsLoginOAuth2ApiService

	AdminsLogoutApi *AdminsLogoutApiService

	AdminsLookupApi *AdminsLookupApiService

	AdminsRecoverPasswordApi *AdminsRecoverPasswordApiService

	ConstantsDefinitionsApi *ConstantsDefinitionsApiService

	ConstantsEventsApi *ConstantsEventsApiService

	ConstantsModelsApi *ConstantsModelsApiService

	InstallerApi *InstallerApiService

	MSPsApi *MSPsApiService

	MSPsAdminsApi *MSPsAdminsApiService

	MSPsInventoryApi *MSPsInventoryApiService

	MSPsLicensesApi *MSPsLicensesApiService

	MSPsLogoApi *MSPsLogoApiService

	MSPsLogsApi *MSPsLogsApiService

	MSPsMarvisApi *MSPsMarvisApiService

	MSPsOrgGroupsApi *MSPsOrgGroupsApiService

	MSPsOrgsApi *MSPsOrgsApiService

	MSPsSLEsApi *MSPsSLEsApiService

	MSPsSSOApi *MSPsSSOApiService

	MSPsSSORolesApi *MSPsSSORolesApiService

	MSPsTicketsApi *MSPsTicketsApiService

	OrgsApi *OrgsApiService

	OrgsAPITokensApi *OrgsAPITokensApiService

	OrgsAPTemplatesApi *OrgsAPTemplatesApiService

	OrgsAdminsApi *OrgsAdminsApiService

	OrgsAlarmTemplatesApi *OrgsAlarmTemplatesApiService

	OrgsAlarmsApi *OrgsAlarmsApiService

	OrgsAntivirusProfilesApi *OrgsAntivirusProfilesApiService

	OrgsAssetFiltersApi *OrgsAssetFiltersApiService

	OrgsAssetsApi *OrgsAssetsApiService

	OrgsCRLApi *OrgsCRLApiService

	OrgsCertApi *OrgsCertApiService

	OrgsClientsMarvisApi *OrgsClientsMarvisApiService

	OrgsClientsNACApi *OrgsClientsNACApiService

	OrgsClientsSDKApi *OrgsClientsSDKApiService

	OrgsClientsWanApi *OrgsClientsWanApiService

	OrgsClientsWiredApi *OrgsClientsWiredApiService

	OrgsClientsWirelessApi *OrgsClientsWirelessApiService

	OrgsCradlepointApi *OrgsCradlepointApiService

	OrgsDeviceProfilesApi *OrgsDeviceProfilesApiService

	OrgsDevicesApi *OrgsDevicesApiService

	OrgsDevicesOthersApi *OrgsDevicesOthersApiService

	OrgsDevicesSSRApi *OrgsDevicesSSRApiService

	OrgsEVPNTopologiesApi *OrgsEVPNTopologiesApiService

	OrgsGatewayTemplatesApi *OrgsGatewayTemplatesApiService

	OrgsGuestsApi *OrgsGuestsApiService

	OrgsIDPProfilesApi *OrgsIDPProfilesApiService

	OrgsInventoryApi *OrgsInventoryApiService

	OrgsJSEApi *OrgsJSEApiService

	OrgsJSIApi *OrgsJSIApiService

	OrgsLicensesApi *OrgsLicensesApiService

	OrgsLinkedApplicationsApi *OrgsLinkedApplicationsApiService

	OrgsLogsApi *OrgsLogsApiService

	OrgsMapsApi *OrgsMapsApiService

	OrgsMarvisApi *OrgsMarvisApiService

	OrgsMxClustersApi *OrgsMxClustersApiService

	OrgsMxEdgesApi *OrgsMxEdgesApiService

	OrgsMxTunnelsApi *OrgsMxTunnelsApiService

	OrgsNACCRLApi *OrgsNACCRLApiService

	OrgsNACIDPApi *OrgsNACIDPApiService

	OrgsNACPortalsApi *OrgsNACPortalsApiService

	OrgsNACRulesApi *OrgsNACRulesApiService

	OrgsNACTagsApi *OrgsNACTagsApiService

	OrgsNetworkTemplatesApi *OrgsNetworkTemplatesApiService

	OrgsNetworksApi *OrgsNetworksApiService

	OrgsPremiumAnalyticsApi *OrgsPremiumAnalyticsApiService

	OrgsPskPortalsApi *OrgsPskPortalsApiService

	OrgsPsksApi *OrgsPsksApiService

	OrgsRFTemplatesApi *OrgsRFTemplatesApiService

	OrgsSCEPApi *OrgsSCEPApiService

	OrgsSDKInvitesApi *OrgsSDKInvitesApiService

	OrgsSDKTemplatesApi *OrgsSDKTemplatesApiService

	OrgsSLEsApi *OrgsSLEsApiService

	OrgsSSOApi *OrgsSSOApiService

	OrgsSSORolesApi *OrgsSSORolesApiService

	OrgsSecIntelProfilesApi *OrgsSecIntelProfilesApiService

	OrgsSecPoliciesApi *OrgsSecPoliciesApiService

	OrgsServicePoliciesApi *OrgsServicePoliciesApiService

	OrgsServicesApi *OrgsServicesApiService

	OrgsSettingApi *OrgsSettingApiService

	OrgsSettingZscalerApi *OrgsSettingZscalerApiService

	OrgsSiteTemplatesApi *OrgsSiteTemplatesApiService

	OrgsSitegroupsApi *OrgsSitegroupsApiService

	OrgsSitesApi *OrgsSitesApiService

	OrgsStatsApi *OrgsStatsApiService

	OrgsStatsAssetsApi *OrgsStatsAssetsApiService

	OrgsStatsBGPPeersApi *OrgsStatsBGPPeersApiService

	OrgsStatsDevicesApi *OrgsStatsDevicesApiService

	OrgsStatsMxEdgesApi *OrgsStatsMxEdgesApiService

	OrgsStatsOtherDevicesApi *OrgsStatsOtherDevicesApiService

	OrgsStatsPortsApi *OrgsStatsPortsApiService

	OrgsStatsTunnelsApi *OrgsStatsTunnelsApiService

	OrgsStatsVPNPeersApi *OrgsStatsVPNPeersApiService

	OrgsSubscriptionsApi *OrgsSubscriptionsApiService

	OrgsTicketsApi *OrgsTicketsApiService

	OrgsUserMACsApi *OrgsUserMACsApiService

	OrgsVPNsApi *OrgsVPNsApiService

	OrgsVarsApi *OrgsVarsApiService

	OrgsWLANTemplatesApi *OrgsWLANTemplatesApiService

	OrgsWebhooksApi *OrgsWebhooksApiService

	OrgsWlansApi *OrgsWlansApiService

	OrgsWxRulesApi *OrgsWxRulesApiService

	OrgsWxTagsApi *OrgsWxTagsApiService

	OrgsWxTunnelsApi *OrgsWxTunnelsApiService

	SamplesWebhooksApi *SamplesWebhooksApiService

	SelfAPITokenApi *SelfAPITokenApiService

	SelfAccountApi *SelfAccountApiService

	SelfAlarmsApi *SelfAlarmsApiService

	SelfAuditLogsApi *SelfAuditLogsApiService

	SelfMFAApi *SelfMFAApiService

	SelfOAuth2Api *SelfOAuth2ApiService

	SitesApi *SitesApiService

	SitesAPTemplatesApi *SitesAPTemplatesApiService

	SitesAlarmsApi *SitesAlarmsApiService

	SitesAnomalyApi *SitesAnomalyApiService

	SitesApplicationsApi *SitesApplicationsApiService

	SitesAssetFiltersApi *SitesAssetFiltersApiService

	SitesAssetsApi *SitesAssetsApiService

	SitesBeaconsApi *SitesBeaconsApiService

	SitesClientsNACApi *SitesClientsNACApiService

	SitesClientsWanApi *SitesClientsWanApiService

	SitesClientsWiredApi *SitesClientsWiredApiService

	SitesClientsWirelessApi *SitesClientsWirelessApiService

	SitesDeviceProfilesApi *SitesDeviceProfilesApiService

	SitesDevicesApi *SitesDevicesApiService

	SitesDevicesOthersApi *SitesDevicesOthersApiService

	SitesDevicesWANClusterApi *SitesDevicesWANClusterApiService

	SitesDevicesWiredApi *SitesDevicesWiredApiService

	SitesDevicesWiredVirtualChassisApi *SitesDevicesWiredVirtualChassisApiService

	SitesDevicesWirelessApi *SitesDevicesWirelessApiService

	SitesEVPNTopologiesApi *SitesEVPNTopologiesApiService

	SitesEventsApi *SitesEventsApiService

	SitesGatewayTemplatesApi *SitesGatewayTemplatesApiService

	SitesGuestsApi *SitesGuestsApiService

	SitesInsightsApi *SitesInsightsApiService

	SitesJSEApi *SitesJSEApiService

	SitesLicensesApi *SitesLicensesApiService

	SitesLocationApi *SitesLocationApiService

	SitesMapsApi *SitesMapsApiService

	SitesMapsAutoPlacementApi *SitesMapsAutoPlacementApiService

	SitesMxEdgesApi *SitesMxEdgesApiService

	SitesNetworkTemplatesApi *SitesNetworkTemplatesApiService

	SitesNetworksApi *SitesNetworksApiService

	SitesPsksApi *SitesPsksApiService

	SitesRFTemplatesApi *SitesRFTemplatesApiService

	SitesRRMApi *SitesRRMApiService

	SitesRSSIZonesApi *SitesRSSIZonesApiService

	SitesRfdiagsApi *SitesRfdiagsApiService

	SitesRoguesApi *SitesRoguesApiService

	SitesSLEsApi *SitesSLEsApiService

	SitesSecIntelProfilesApi *SitesSecIntelProfilesApiService

	SitesServicePoliciesApi *SitesServicePoliciesApiService

	SitesServicesApi *SitesServicesApiService

	SitesSettingApi *SitesSettingApiService

	SitesSiteTemplatesApi *SitesSiteTemplatesApiService

	SitesSkyatpApi *SitesSkyatpApiService

	SitesStatsApi *SitesStatsApiService

	SitesStatsAppsApi *SitesStatsAppsApiService

	SitesStatsAssetsApi *SitesStatsAssetsApiService

	SitesStatsBGPPeersApi *SitesStatsBGPPeersApiService

	SitesStatsBeaconsApi *SitesStatsBeaconsApiService

	SitesStatsCallsApi *SitesStatsCallsApiService

	SitesStatsClientsSDKApi *SitesStatsClientsSDKApiService

	SitesStatsClientsWirelessApi *SitesStatsClientsWirelessApiService

	SitesStatsDevicesApi *SitesStatsDevicesApiService

	SitesStatsDiscoveredSwitchesApi *SitesStatsDiscoveredSwitchesApiService

	SitesStatsMxEdgesApi *SitesStatsMxEdgesApiService

	SitesStatsPortsApi *SitesStatsPortsApiService

	SitesStatsWxRulesApi *SitesStatsWxRulesApiService

	SitesStatsZonesApi *SitesStatsZonesApiService

	SitesSyntheticTestsApi *SitesSyntheticTestsApiService

	SitesUISettingsApi *SitesUISettingsApiService

	SitesVBeaconsApi *SitesVBeaconsApiService

	SitesVPNsApi *SitesVPNsApiService

	SitesWANUsagesApi *SitesWANUsagesApiService

	SitesWebhooksApi *SitesWebhooksApiService

	SitesWlansApi *SitesWlansApiService

	SitesWxRulesApi *SitesWxRulesApiService

	SitesWxTagsApi *SitesWxTagsApiService

	SitesWxTunnelsApi *SitesWxTunnelsApiService

	SitesZonesApi *SitesZonesApiService

	UtilitiesCommonApi *UtilitiesCommonApiService

	UtilitiesLANApi *UtilitiesLANApiService

	UtilitiesLocationApi *UtilitiesLocationApiService

	UtilitiesMxEdgeApi *UtilitiesMxEdgeApiService

	UtilitiesPCAPsApi *UtilitiesPCAPsApiService

	UtilitiesUpgradeApi *UtilitiesUpgradeApiService

	UtilitiesWANApi *UtilitiesWANApiService

	UtilitiesWiFiApi *UtilitiesWiFiApiService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.AdminsApi = (*AdminsApiService)(&c.common)
	c.AdminsLoginApi = (*AdminsLoginApiService)(&c.common)
	c.AdminsLoginOAuth2Api = (*AdminsLoginOAuth2ApiService)(&c.common)
	c.AdminsLogoutApi = (*AdminsLogoutApiService)(&c.common)
	c.AdminsLookupApi = (*AdminsLookupApiService)(&c.common)
	c.AdminsRecoverPasswordApi = (*AdminsRecoverPasswordApiService)(&c.common)
	c.ConstantsDefinitionsApi = (*ConstantsDefinitionsApiService)(&c.common)
	c.ConstantsEventsApi = (*ConstantsEventsApiService)(&c.common)
	c.ConstantsModelsApi = (*ConstantsModelsApiService)(&c.common)
	c.InstallerApi = (*InstallerApiService)(&c.common)
	c.MSPsApi = (*MSPsApiService)(&c.common)
	c.MSPsAdminsApi = (*MSPsAdminsApiService)(&c.common)
	c.MSPsInventoryApi = (*MSPsInventoryApiService)(&c.common)
	c.MSPsLicensesApi = (*MSPsLicensesApiService)(&c.common)
	c.MSPsLogoApi = (*MSPsLogoApiService)(&c.common)
	c.MSPsLogsApi = (*MSPsLogsApiService)(&c.common)
	c.MSPsMarvisApi = (*MSPsMarvisApiService)(&c.common)
	c.MSPsOrgGroupsApi = (*MSPsOrgGroupsApiService)(&c.common)
	c.MSPsOrgsApi = (*MSPsOrgsApiService)(&c.common)
	c.MSPsSLEsApi = (*MSPsSLEsApiService)(&c.common)
	c.MSPsSSOApi = (*MSPsSSOApiService)(&c.common)
	c.MSPsSSORolesApi = (*MSPsSSORolesApiService)(&c.common)
	c.MSPsTicketsApi = (*MSPsTicketsApiService)(&c.common)
	c.OrgsApi = (*OrgsApiService)(&c.common)
	c.OrgsAPITokensApi = (*OrgsAPITokensApiService)(&c.common)
	c.OrgsAPTemplatesApi = (*OrgsAPTemplatesApiService)(&c.common)
	c.OrgsAdminsApi = (*OrgsAdminsApiService)(&c.common)
	c.OrgsAlarmTemplatesApi = (*OrgsAlarmTemplatesApiService)(&c.common)
	c.OrgsAlarmsApi = (*OrgsAlarmsApiService)(&c.common)
	c.OrgsAntivirusProfilesApi = (*OrgsAntivirusProfilesApiService)(&c.common)
	c.OrgsAssetFiltersApi = (*OrgsAssetFiltersApiService)(&c.common)
	c.OrgsAssetsApi = (*OrgsAssetsApiService)(&c.common)
	c.OrgsCRLApi = (*OrgsCRLApiService)(&c.common)
	c.OrgsCertApi = (*OrgsCertApiService)(&c.common)
	c.OrgsClientsMarvisApi = (*OrgsClientsMarvisApiService)(&c.common)
	c.OrgsClientsNACApi = (*OrgsClientsNACApiService)(&c.common)
	c.OrgsClientsSDKApi = (*OrgsClientsSDKApiService)(&c.common)
	c.OrgsClientsWanApi = (*OrgsClientsWanApiService)(&c.common)
	c.OrgsClientsWiredApi = (*OrgsClientsWiredApiService)(&c.common)
	c.OrgsClientsWirelessApi = (*OrgsClientsWirelessApiService)(&c.common)
	c.OrgsCradlepointApi = (*OrgsCradlepointApiService)(&c.common)
	c.OrgsDeviceProfilesApi = (*OrgsDeviceProfilesApiService)(&c.common)
	c.OrgsDevicesApi = (*OrgsDevicesApiService)(&c.common)
	c.OrgsDevicesOthersApi = (*OrgsDevicesOthersApiService)(&c.common)
	c.OrgsDevicesSSRApi = (*OrgsDevicesSSRApiService)(&c.common)
	c.OrgsEVPNTopologiesApi = (*OrgsEVPNTopologiesApiService)(&c.common)
	c.OrgsGatewayTemplatesApi = (*OrgsGatewayTemplatesApiService)(&c.common)
	c.OrgsGuestsApi = (*OrgsGuestsApiService)(&c.common)
	c.OrgsIDPProfilesApi = (*OrgsIDPProfilesApiService)(&c.common)
	c.OrgsInventoryApi = (*OrgsInventoryApiService)(&c.common)
	c.OrgsJSEApi = (*OrgsJSEApiService)(&c.common)
	c.OrgsJSIApi = (*OrgsJSIApiService)(&c.common)
	c.OrgsLicensesApi = (*OrgsLicensesApiService)(&c.common)
	c.OrgsLinkedApplicationsApi = (*OrgsLinkedApplicationsApiService)(&c.common)
	c.OrgsLogsApi = (*OrgsLogsApiService)(&c.common)
	c.OrgsMapsApi = (*OrgsMapsApiService)(&c.common)
	c.OrgsMarvisApi = (*OrgsMarvisApiService)(&c.common)
	c.OrgsMxClustersApi = (*OrgsMxClustersApiService)(&c.common)
	c.OrgsMxEdgesApi = (*OrgsMxEdgesApiService)(&c.common)
	c.OrgsMxTunnelsApi = (*OrgsMxTunnelsApiService)(&c.common)
	c.OrgsNACCRLApi = (*OrgsNACCRLApiService)(&c.common)
	c.OrgsNACIDPApi = (*OrgsNACIDPApiService)(&c.common)
	c.OrgsNACPortalsApi = (*OrgsNACPortalsApiService)(&c.common)
	c.OrgsNACRulesApi = (*OrgsNACRulesApiService)(&c.common)
	c.OrgsNACTagsApi = (*OrgsNACTagsApiService)(&c.common)
	c.OrgsNetworkTemplatesApi = (*OrgsNetworkTemplatesApiService)(&c.common)
	c.OrgsNetworksApi = (*OrgsNetworksApiService)(&c.common)
	c.OrgsPremiumAnalyticsApi = (*OrgsPremiumAnalyticsApiService)(&c.common)
	c.OrgsPskPortalsApi = (*OrgsPskPortalsApiService)(&c.common)
	c.OrgsPsksApi = (*OrgsPsksApiService)(&c.common)
	c.OrgsRFTemplatesApi = (*OrgsRFTemplatesApiService)(&c.common)
	c.OrgsSCEPApi = (*OrgsSCEPApiService)(&c.common)
	c.OrgsSDKInvitesApi = (*OrgsSDKInvitesApiService)(&c.common)
	c.OrgsSDKTemplatesApi = (*OrgsSDKTemplatesApiService)(&c.common)
	c.OrgsSLEsApi = (*OrgsSLEsApiService)(&c.common)
	c.OrgsSSOApi = (*OrgsSSOApiService)(&c.common)
	c.OrgsSSORolesApi = (*OrgsSSORolesApiService)(&c.common)
	c.OrgsSecIntelProfilesApi = (*OrgsSecIntelProfilesApiService)(&c.common)
	c.OrgsSecPoliciesApi = (*OrgsSecPoliciesApiService)(&c.common)
	c.OrgsServicePoliciesApi = (*OrgsServicePoliciesApiService)(&c.common)
	c.OrgsServicesApi = (*OrgsServicesApiService)(&c.common)
	c.OrgsSettingApi = (*OrgsSettingApiService)(&c.common)
	c.OrgsSettingZscalerApi = (*OrgsSettingZscalerApiService)(&c.common)
	c.OrgsSiteTemplatesApi = (*OrgsSiteTemplatesApiService)(&c.common)
	c.OrgsSitegroupsApi = (*OrgsSitegroupsApiService)(&c.common)
	c.OrgsSitesApi = (*OrgsSitesApiService)(&c.common)
	c.OrgsStatsApi = (*OrgsStatsApiService)(&c.common)
	c.OrgsStatsAssetsApi = (*OrgsStatsAssetsApiService)(&c.common)
	c.OrgsStatsBGPPeersApi = (*OrgsStatsBGPPeersApiService)(&c.common)
	c.OrgsStatsDevicesApi = (*OrgsStatsDevicesApiService)(&c.common)
	c.OrgsStatsMxEdgesApi = (*OrgsStatsMxEdgesApiService)(&c.common)
	c.OrgsStatsOtherDevicesApi = (*OrgsStatsOtherDevicesApiService)(&c.common)
	c.OrgsStatsPortsApi = (*OrgsStatsPortsApiService)(&c.common)
	c.OrgsStatsTunnelsApi = (*OrgsStatsTunnelsApiService)(&c.common)
	c.OrgsStatsVPNPeersApi = (*OrgsStatsVPNPeersApiService)(&c.common)
	c.OrgsSubscriptionsApi = (*OrgsSubscriptionsApiService)(&c.common)
	c.OrgsTicketsApi = (*OrgsTicketsApiService)(&c.common)
	c.OrgsUserMACsApi = (*OrgsUserMACsApiService)(&c.common)
	c.OrgsVPNsApi = (*OrgsVPNsApiService)(&c.common)
	c.OrgsVarsApi = (*OrgsVarsApiService)(&c.common)
	c.OrgsWLANTemplatesApi = (*OrgsWLANTemplatesApiService)(&c.common)
	c.OrgsWebhooksApi = (*OrgsWebhooksApiService)(&c.common)
	c.OrgsWlansApi = (*OrgsWlansApiService)(&c.common)
	c.OrgsWxRulesApi = (*OrgsWxRulesApiService)(&c.common)
	c.OrgsWxTagsApi = (*OrgsWxTagsApiService)(&c.common)
	c.OrgsWxTunnelsApi = (*OrgsWxTunnelsApiService)(&c.common)
	c.SamplesWebhooksApi = (*SamplesWebhooksApiService)(&c.common)
	c.SelfAPITokenApi = (*SelfAPITokenApiService)(&c.common)
	c.SelfAccountApi = (*SelfAccountApiService)(&c.common)
	c.SelfAlarmsApi = (*SelfAlarmsApiService)(&c.common)
	c.SelfAuditLogsApi = (*SelfAuditLogsApiService)(&c.common)
	c.SelfMFAApi = (*SelfMFAApiService)(&c.common)
	c.SelfOAuth2Api = (*SelfOAuth2ApiService)(&c.common)
	c.SitesApi = (*SitesApiService)(&c.common)
	c.SitesAPTemplatesApi = (*SitesAPTemplatesApiService)(&c.common)
	c.SitesAlarmsApi = (*SitesAlarmsApiService)(&c.common)
	c.SitesAnomalyApi = (*SitesAnomalyApiService)(&c.common)
	c.SitesApplicationsApi = (*SitesApplicationsApiService)(&c.common)
	c.SitesAssetFiltersApi = (*SitesAssetFiltersApiService)(&c.common)
	c.SitesAssetsApi = (*SitesAssetsApiService)(&c.common)
	c.SitesBeaconsApi = (*SitesBeaconsApiService)(&c.common)
	c.SitesClientsNACApi = (*SitesClientsNACApiService)(&c.common)
	c.SitesClientsWanApi = (*SitesClientsWanApiService)(&c.common)
	c.SitesClientsWiredApi = (*SitesClientsWiredApiService)(&c.common)
	c.SitesClientsWirelessApi = (*SitesClientsWirelessApiService)(&c.common)
	c.SitesDeviceProfilesApi = (*SitesDeviceProfilesApiService)(&c.common)
	c.SitesDevicesApi = (*SitesDevicesApiService)(&c.common)
	c.SitesDevicesOthersApi = (*SitesDevicesOthersApiService)(&c.common)
	c.SitesDevicesWANClusterApi = (*SitesDevicesWANClusterApiService)(&c.common)
	c.SitesDevicesWiredApi = (*SitesDevicesWiredApiService)(&c.common)
	c.SitesDevicesWiredVirtualChassisApi = (*SitesDevicesWiredVirtualChassisApiService)(&c.common)
	c.SitesDevicesWirelessApi = (*SitesDevicesWirelessApiService)(&c.common)
	c.SitesEVPNTopologiesApi = (*SitesEVPNTopologiesApiService)(&c.common)
	c.SitesEventsApi = (*SitesEventsApiService)(&c.common)
	c.SitesGatewayTemplatesApi = (*SitesGatewayTemplatesApiService)(&c.common)
	c.SitesGuestsApi = (*SitesGuestsApiService)(&c.common)
	c.SitesInsightsApi = (*SitesInsightsApiService)(&c.common)
	c.SitesJSEApi = (*SitesJSEApiService)(&c.common)
	c.SitesLicensesApi = (*SitesLicensesApiService)(&c.common)
	c.SitesLocationApi = (*SitesLocationApiService)(&c.common)
	c.SitesMapsApi = (*SitesMapsApiService)(&c.common)
	c.SitesMapsAutoPlacementApi = (*SitesMapsAutoPlacementApiService)(&c.common)
	c.SitesMxEdgesApi = (*SitesMxEdgesApiService)(&c.common)
	c.SitesNetworkTemplatesApi = (*SitesNetworkTemplatesApiService)(&c.common)
	c.SitesNetworksApi = (*SitesNetworksApiService)(&c.common)
	c.SitesPsksApi = (*SitesPsksApiService)(&c.common)
	c.SitesRFTemplatesApi = (*SitesRFTemplatesApiService)(&c.common)
	c.SitesRRMApi = (*SitesRRMApiService)(&c.common)
	c.SitesRSSIZonesApi = (*SitesRSSIZonesApiService)(&c.common)
	c.SitesRfdiagsApi = (*SitesRfdiagsApiService)(&c.common)
	c.SitesRoguesApi = (*SitesRoguesApiService)(&c.common)
	c.SitesSLEsApi = (*SitesSLEsApiService)(&c.common)
	c.SitesSecIntelProfilesApi = (*SitesSecIntelProfilesApiService)(&c.common)
	c.SitesServicePoliciesApi = (*SitesServicePoliciesApiService)(&c.common)
	c.SitesServicesApi = (*SitesServicesApiService)(&c.common)
	c.SitesSettingApi = (*SitesSettingApiService)(&c.common)
	c.SitesSiteTemplatesApi = (*SitesSiteTemplatesApiService)(&c.common)
	c.SitesSkyatpApi = (*SitesSkyatpApiService)(&c.common)
	c.SitesStatsApi = (*SitesStatsApiService)(&c.common)
	c.SitesStatsAppsApi = (*SitesStatsAppsApiService)(&c.common)
	c.SitesStatsAssetsApi = (*SitesStatsAssetsApiService)(&c.common)
	c.SitesStatsBGPPeersApi = (*SitesStatsBGPPeersApiService)(&c.common)
	c.SitesStatsBeaconsApi = (*SitesStatsBeaconsApiService)(&c.common)
	c.SitesStatsCallsApi = (*SitesStatsCallsApiService)(&c.common)
	c.SitesStatsClientsSDKApi = (*SitesStatsClientsSDKApiService)(&c.common)
	c.SitesStatsClientsWirelessApi = (*SitesStatsClientsWirelessApiService)(&c.common)
	c.SitesStatsDevicesApi = (*SitesStatsDevicesApiService)(&c.common)
	c.SitesStatsDiscoveredSwitchesApi = (*SitesStatsDiscoveredSwitchesApiService)(&c.common)
	c.SitesStatsMxEdgesApi = (*SitesStatsMxEdgesApiService)(&c.common)
	c.SitesStatsPortsApi = (*SitesStatsPortsApiService)(&c.common)
	c.SitesStatsWxRulesApi = (*SitesStatsWxRulesApiService)(&c.common)
	c.SitesStatsZonesApi = (*SitesStatsZonesApiService)(&c.common)
	c.SitesSyntheticTestsApi = (*SitesSyntheticTestsApiService)(&c.common)
	c.SitesUISettingsApi = (*SitesUISettingsApiService)(&c.common)
	c.SitesVBeaconsApi = (*SitesVBeaconsApiService)(&c.common)
	c.SitesVPNsApi = (*SitesVPNsApiService)(&c.common)
	c.SitesWANUsagesApi = (*SitesWANUsagesApiService)(&c.common)
	c.SitesWebhooksApi = (*SitesWebhooksApiService)(&c.common)
	c.SitesWlansApi = (*SitesWlansApiService)(&c.common)
	c.SitesWxRulesApi = (*SitesWxRulesApiService)(&c.common)
	c.SitesWxTagsApi = (*SitesWxTagsApiService)(&c.common)
	c.SitesWxTunnelsApi = (*SitesWxTunnelsApiService)(&c.common)
	c.SitesZonesApi = (*SitesZonesApiService)(&c.common)
	c.UtilitiesCommonApi = (*UtilitiesCommonApiService)(&c.common)
	c.UtilitiesLANApi = (*UtilitiesLANApiService)(&c.common)
	c.UtilitiesLocationApi = (*UtilitiesLocationApiService)(&c.common)
	c.UtilitiesMxEdgeApi = (*UtilitiesMxEdgeApiService)(&c.common)
	c.UtilitiesPCAPsApi = (*UtilitiesPCAPsApiService)(&c.common)
	c.UtilitiesUpgradeApi = (*UtilitiesUpgradeApiService)(&c.common)
	c.UtilitiesWANApi = (*UtilitiesWANApiService)(&c.common)
	c.UtilitiesWiFiApi = (*UtilitiesWiFiApiService)(&c.common)

	return c
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}

// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insenstive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.ToLower(a) == strings.ToLower(needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("Expected %s to be of type %s but received %s.", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

// parameterToString convert interface{} parameters to string, using a delimiter if format is provided.
func parameterToString(obj interface{}, collectionFormat string) string {
	var delimiter string

	switch collectionFormat {
	case "pipes":
		delimiter = "|"
	case "ssv":
		delimiter = " "
	case "tsv":
		delimiter = "\t"
	case "csv":
		delimiter = ","
	}

	if reflect.TypeOf(obj).Kind() == reflect.Slice {
		return strings.Trim(strings.Replace(fmt.Sprint(obj), " ", delimiter, -1), "[]")
	}

	return fmt.Sprintf("%v", obj)
}

// callAPI do the request.
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	return c.cfg.HTTPClient.Do(request)
}

// Change base path to allow switching to mocks
func (c *APIClient) ChangeBasePath(path string) {
	c.cfg.BasePath = path
}

// prepareRequest build the request
func (c *APIClient) prepareRequest(
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	fileName string,
	fileBytes []byte) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form parameters and file if available.
	if strings.HasPrefix(headerParams["Content-Type"], "multipart/form-data") && len(formParams) > 0 || (len(fileBytes) > 0 && fileName != "") {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		if len(fileBytes) > 0 && fileName != "" {
			w.Boundary()
			//_, fileNm := filepath.Split(fileName)
			part, err := w.CreateFormFile("file", filepath.Base(fileName))
			if err != nil {
				return nil, err
			}
			_, err = part.Write(fileBytes)
			if err != nil {
				return nil, err
			}
			// Set the Boundary in the Content-Type
			headerParams["Content-Type"] = w.FormDataContentType()
		}

		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	if strings.HasPrefix(headerParams["Content-Type"], "application/x-www-form-urlencoded") && len(formParams) > 0 {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and x-www-form-urlencoded form at the same time.")
		}
		body = &bytes.Buffer{}
		body.WriteString(formParams.Encode())
		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
	}

	// Setup path and query parameters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = query.Encode()

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers.Set(h, v)
		}
		localVarRequest.Header = headers
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		localVarRequest.Host = c.cfg.Host
	}

	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)

	if ctx != nil {
		// add context to the request
		localVarRequest = localVarRequest.WithContext(ctx)

		// Walk through any authentication.

		// OAuth2 authentication
		if tok, ok := ctx.Value(ContextOAuth2).(oauth2.TokenSource); ok {
			// We were able to grab an oauth2 token from the context
			var latestToken *oauth2.Token
			if latestToken, err = tok.Token(); err != nil {
				return nil, err
			}

			latestToken.SetAuthHeader(localVarRequest)
		}

		// Basic HTTP Authentication
		if auth, ok := ctx.Value(ContextBasicAuth).(BasicAuth); ok {
			localVarRequest.SetBasicAuth(auth.UserName, auth.Password)
		}

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer "+auth)
		}
	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}

	return localVarRequest, nil
}

func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err error) {
		if strings.Contains(contentType, "application/xml") {
			if err = xml.Unmarshal(b, v); err != nil {
				return err
			}
			return nil
		} else if strings.Contains(contentType, "application/json") {
			if err = json.Unmarshal(b, v); err != nil {
				return err
			}
			return nil
		}
	return errors.New("undefined response type")
}

// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(path)
	if err != nil {
		return err
	}
	defer file.Close()

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Prevent trying to import "fmt"
func reportError(format string, a ...interface{}) error {
	return fmt.Errorf(format, a...)
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if s, ok := body.(*string); ok {
		_, err = bodyBuf.WriteString(*s)
	} else if jsonCheck.MatchString(contentType) {
		err = json.NewEncoder(bodyBuf).Encode(body)
	} else if xmlCheck.MatchString(contentType) {
		xml.NewEncoder(bodyBuf).Encode(body)
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("Invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()

	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}

// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) time.Time {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)

	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		}
		expires = now.Add(lifetime)
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) int {
	return utf8.RuneCountInString(s)
}

// GenericSwaggerError Provides access to the body, error and model on returned errors.
type GenericSwaggerError struct {
	body  []byte
	error string
	model interface{}
}

// Error returns non-empty string if there was an error.
func (e GenericSwaggerError) Error() string {
	return e.error
}

// Body returns the raw bytes of the response
func (e GenericSwaggerError) Body() []byte {
	return e.body
}

// Model returns the unpacked model of the error
func (e GenericSwaggerError) Model() interface{} {
	return e.model
}
