
/*
 * Mist API
 *
 * > Version: **2409.1.9** > > Date: **September 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates] (https://www.juniper.net/documentation/us/en/software/mist/api/http/getting-started/how-to-get-started)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 
 *
 * API version: 2409.1.9
 * Contact: tmunzer@juniper.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type SitesClientsWirelessApiService service
/*
SitesClientsWirelessApiService countSiteWirelessClientEvents
Count by Distinct Attributes of Client-Events
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsWirelessApiCountSiteWirelessClientEventsOpts - Optional Parameters:
     * @param "Distinct" (optional.Interface of Distinct6) - 
     * @param "Type_" (optional.String) -  see [listDeviceEventsDefinitions]($e/Constants%20Events/listDeviceEventsDefinitions)
     * @param "ReasonCode" (optional.Int32) -  for assoc/disassoc events
     * @param "Ssid" (optional.String) -  SSID Name
     * @param "Ap" (optional.String) -  AP MAC
     * @param "Proto" (optional.Interface of Proto1) -  a / b / g / n / ac / ax
     * @param "Band" (optional.Interface of Band3) -  802.11 Band
     * @param "WlanId" (optional.String) -  wlan_id
     * @param "Limit" (optional.Int32) - 
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
@return InlineResponse20016
*/

type SitesClientsWirelessApiCountSiteWirelessClientEventsOpts struct {
    Distinct optional.Interface
    Type_ optional.String
    ReasonCode optional.Int32
    Ssid optional.String
    Ap optional.String
    Proto optional.Interface
    Band optional.Interface
    WlanId optional.String
    Limit optional.Int32
    Start optional.Int32
    End optional.Int32
    Duration optional.String
}

func (a *SitesClientsWirelessApiService) CountSiteWirelessClientEvents(ctx context.Context, siteId string, localVarOptionals *SitesClientsWirelessApiCountSiteWirelessClientEventsOpts) (InlineResponse20016, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20016
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/clients/events/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Distinct.IsSet() {
		localVarQueryParams.Add("distinct", parameterToString(localVarOptionals.Distinct.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReasonCode.IsSet() {
		localVarQueryParams.Add("reason_code", parameterToString(localVarOptionals.ReasonCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ap.IsSet() {
		localVarQueryParams.Add("ap", parameterToString(localVarOptionals.Ap.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Proto.IsSet() {
		localVarQueryParams.Add("proto", parameterToString(localVarOptionals.Proto.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Band.IsSet() {
		localVarQueryParams.Add("band", parameterToString(localVarOptionals.Band.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WlanId.IsSet() {
		localVarQueryParams.Add("wlan_id", parameterToString(localVarOptionals.WlanId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsWirelessApiService countSiteWirelessClientSessions
Count by Distinct Attributes of Client Sessions
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsWirelessApiCountSiteWirelessClientSessionsOpts - Optional Parameters:
     * @param "Distinct" (optional.Interface of SiteClientSessionsCountDistinct) - 
     * @param "Ap" (optional.String) -  AP MAC
     * @param "Band" (optional.Interface of Band5) -  802.11 Band
     * @param "ClientFamily" (optional.String) -  E.g. “Mac”, “iPhone”, “Apple watch”
     * @param "ClientManufacture" (optional.String) -  E.g. “Apple”
     * @param "ClientModel" (optional.String) -  E.g. “8+”, “XS”
     * @param "ClientOs" (optional.String) -  E.g. “Mojave”, “Windows 10”, “Linux”
     * @param "Ssid" (optional.String) -  SSID
     * @param "WlanId" (optional.String) -  wlan_id
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
     * @param "Limit" (optional.Int32) - 
     * @param "Page" (optional.Int32) - 
@return InlineResponse20016
*/

type SitesClientsWirelessApiCountSiteWirelessClientSessionsOpts struct {
    Distinct optional.Interface
    Ap optional.String
    Band optional.Interface
    ClientFamily optional.String
    ClientManufacture optional.String
    ClientModel optional.String
    ClientOs optional.String
    Ssid optional.String
    WlanId optional.String
    Start optional.Int32
    End optional.Int32
    Duration optional.String
    Limit optional.Int32
    Page optional.Int32
}

func (a *SitesClientsWirelessApiService) CountSiteWirelessClientSessions(ctx context.Context, siteId string, localVarOptionals *SitesClientsWirelessApiCountSiteWirelessClientSessionsOpts) (InlineResponse20016, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20016
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/clients/sessions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Distinct.IsSet() {
		localVarQueryParams.Add("distinct", parameterToString(localVarOptionals.Distinct.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ap.IsSet() {
		localVarQueryParams.Add("ap", parameterToString(localVarOptionals.Ap.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Band.IsSet() {
		localVarQueryParams.Add("band", parameterToString(localVarOptionals.Band.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientFamily.IsSet() {
		localVarQueryParams.Add("client_family", parameterToString(localVarOptionals.ClientFamily.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientManufacture.IsSet() {
		localVarQueryParams.Add("client_manufacture", parameterToString(localVarOptionals.ClientManufacture.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientModel.IsSet() {
		localVarQueryParams.Add("client_model", parameterToString(localVarOptionals.ClientModel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientOs.IsSet() {
		localVarQueryParams.Add("client_os", parameterToString(localVarOptionals.ClientOs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WlanId.IsSet() {
		localVarQueryParams.Add("wlan_id", parameterToString(localVarOptionals.WlanId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsWirelessApiService countSiteWirelessClients
Count by Distinct Attributes of Clients
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsWirelessApiCountSiteWirelessClientsOpts - Optional Parameters:
     * @param "Distinct" (optional.Interface of Distinct5) - 
     * @param "Ssid" (optional.String) - 
     * @param "Ap" (optional.String) - 
     * @param "IpAddress" (optional.String) - 
     * @param "Vlan" (optional.String) - 
     * @param "Hostname" (optional.String) - 
     * @param "Os" (optional.String) - 
     * @param "Model" (optional.String) - 
     * @param "Device" (optional.String) - 
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
     * @param "Limit" (optional.Int32) - 
     * @param "Page" (optional.Int32) - 
@return InlineResponse20016
*/

type SitesClientsWirelessApiCountSiteWirelessClientsOpts struct {
    Distinct optional.Interface
    Ssid optional.String
    Ap optional.String
    IpAddress optional.String
    Vlan optional.String
    Hostname optional.String
    Os optional.String
    Model optional.String
    Device optional.String
    Start optional.Int32
    End optional.Int32
    Duration optional.String
    Limit optional.Int32
    Page optional.Int32
}

func (a *SitesClientsWirelessApiService) CountSiteWirelessClients(ctx context.Context, siteId string, localVarOptionals *SitesClientsWirelessApiCountSiteWirelessClientsOpts) (InlineResponse20016, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20016
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/clients/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Distinct.IsSet() {
		localVarQueryParams.Add("distinct", parameterToString(localVarOptionals.Distinct.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ap.IsSet() {
		localVarQueryParams.Add("ap", parameterToString(localVarOptionals.Ap.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IpAddress.IsSet() {
		localVarQueryParams.Add("ip_address", parameterToString(localVarOptionals.IpAddress.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vlan.IsSet() {
		localVarQueryParams.Add("vlan", parameterToString(localVarOptionals.Vlan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Hostname.IsSet() {
		localVarQueryParams.Add("hostname", parameterToString(localVarOptionals.Hostname.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Os.IsSet() {
		localVarQueryParams.Add("os", parameterToString(localVarOptionals.Os.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {
		localVarQueryParams.Add("model", parameterToString(localVarOptionals.Model.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Device.IsSet() {
		localVarQueryParams.Add("device", parameterToString(localVarOptionals.Device.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsWirelessApiService getSiteEventsForClient
Get the list of events for a specific client
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param clientMac
 * @param optional nil or *SitesClientsWirelessApiGetSiteEventsForClientOpts - Optional Parameters:
     * @param "Type_" (optional.String) -  e.g. MARVIS_EVENT_CLIENT_DHCP_STUCK
     * @param "Proto" (optional.Interface of Proto3) -  a / b / g / n / ac / ax
     * @param "Band" (optional.Interface of Band7) -  802.11 Band
     * @param "Channel" (optional.String) - 
     * @param "WlanId" (optional.String) - 
     * @param "Ssid" (optional.String) - 
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
     * @param "Limit" (optional.Int32) - 
     * @param "Page" (optional.Int32) - 
@return InlineResponse200120
*/

type SitesClientsWirelessApiGetSiteEventsForClientOpts struct {
    Type_ optional.String
    Proto optional.Interface
    Band optional.Interface
    Channel optional.String
    WlanId optional.String
    Ssid optional.String
    Start optional.Int32
    End optional.Int32
    Duration optional.String
    Limit optional.Int32
    Page optional.Int32
}

func (a *SitesClientsWirelessApiService) GetSiteEventsForClient(ctx context.Context, siteId string, clientMac string, localVarOptionals *SitesClientsWirelessApiGetSiteEventsForClientOpts) (InlineResponse200120, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse200120
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/clients/{client_mac}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client_mac"+"}", fmt.Sprintf("%v", clientMac), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Proto.IsSet() {
		localVarQueryParams.Add("proto", parameterToString(localVarOptionals.Proto.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Band.IsSet() {
		localVarQueryParams.Add("band", parameterToString(localVarOptionals.Band.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Channel.IsSet() {
		localVarQueryParams.Add("channel", parameterToString(localVarOptionals.Channel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WlanId.IsSet() {
		localVarQueryParams.Add("wlan_id", parameterToString(localVarOptionals.WlanId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse200120
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsWirelessApiService searchSiteWirelessClientEvents
Get Site Clients Events
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsWirelessApiSearchSiteWirelessClientEventsOpts - Optional Parameters:
     * @param "Type_" (optional.String) -  see [listDeviceEventsDefinitions]($e/Constants%20Events/listDeviceEventsDefinitions)
     * @param "ReasonCode" (optional.Int32) -  for assoc/disassoc events
     * @param "Ssid" (optional.String) -  SSID Name
     * @param "Ap" (optional.String) -  AP MAC
     * @param "Proto" (optional.Interface of Proto2) -  a / b / g / n / ac / ax
     * @param "Band" (optional.Interface of Band4) -  802.11 Band
     * @param "WlanId" (optional.String) -  wlan_id
     * @param "NacruleId" (optional.String) -  nacrule_id
     * @param "Limit" (optional.Int32) - 
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
@return InlineResponse20042
*/

type SitesClientsWirelessApiSearchSiteWirelessClientEventsOpts struct {
    Type_ optional.String
    ReasonCode optional.Int32
    Ssid optional.String
    Ap optional.String
    Proto optional.Interface
    Band optional.Interface
    WlanId optional.String
    NacruleId optional.String
    Limit optional.Int32
    Start optional.Int32
    End optional.Int32
    Duration optional.String
}

func (a *SitesClientsWirelessApiService) SearchSiteWirelessClientEvents(ctx context.Context, siteId string, localVarOptionals *SitesClientsWirelessApiSearchSiteWirelessClientEventsOpts) (InlineResponse20042, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20042
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/clients/events/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReasonCode.IsSet() {
		localVarQueryParams.Add("reason_code", parameterToString(localVarOptionals.ReasonCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ap.IsSet() {
		localVarQueryParams.Add("ap", parameterToString(localVarOptionals.Ap.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Proto.IsSet() {
		localVarQueryParams.Add("proto", parameterToString(localVarOptionals.Proto.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Band.IsSet() {
		localVarQueryParams.Add("band", parameterToString(localVarOptionals.Band.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WlanId.IsSet() {
		localVarQueryParams.Add("wlan_id", parameterToString(localVarOptionals.WlanId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NacruleId.IsSet() {
		localVarQueryParams.Add("nacrule_id", parameterToString(localVarOptionals.NacruleId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20042
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsWirelessApiService searchSiteWirelessClientSessions
Search Client Sessions
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsWirelessApiSearchSiteWirelessClientSessionsOpts - Optional Parameters:
     * @param "Ap" (optional.String) -  AP MAC
     * @param "Band" (optional.Interface of Band6) -  802.11 Band
     * @param "ClientFamily" (optional.String) -  E.g. “Mac”, “iPhone”, “Apple watch”
     * @param "ClientManufacture" (optional.String) -  E.g. “Apple”
     * @param "ClientModel" (optional.String) -  E.g. “8+”, “XS”
     * @param "ClientUsername" (optional.String) -  Username
     * @param "ClientOs" (optional.String) -  E.g. “Mojave”, “Windows 10”, “Linux”
     * @param "Ssid" (optional.String) -  SSID
     * @param "WlanId" (optional.String) -  wlan_id
     * @param "PskId" (optional.String) -  PSK ID
     * @param "PskName" (optional.String) -  PSK Name
     * @param "Limit" (optional.Int32) - 
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
@return InlineResponse200119
*/

type SitesClientsWirelessApiSearchSiteWirelessClientSessionsOpts struct {
    Ap optional.String
    Band optional.Interface
    ClientFamily optional.String
    ClientManufacture optional.String
    ClientModel optional.String
    ClientUsername optional.String
    ClientOs optional.String
    Ssid optional.String
    WlanId optional.String
    PskId optional.String
    PskName optional.String
    Limit optional.Int32
    Start optional.Int32
    End optional.Int32
    Duration optional.String
}

func (a *SitesClientsWirelessApiService) SearchSiteWirelessClientSessions(ctx context.Context, siteId string, localVarOptionals *SitesClientsWirelessApiSearchSiteWirelessClientSessionsOpts) (InlineResponse200119, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse200119
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/clients/sessions/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Ap.IsSet() {
		localVarQueryParams.Add("ap", parameterToString(localVarOptionals.Ap.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Band.IsSet() {
		localVarQueryParams.Add("band", parameterToString(localVarOptionals.Band.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientFamily.IsSet() {
		localVarQueryParams.Add("client_family", parameterToString(localVarOptionals.ClientFamily.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientManufacture.IsSet() {
		localVarQueryParams.Add("client_manufacture", parameterToString(localVarOptionals.ClientManufacture.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientModel.IsSet() {
		localVarQueryParams.Add("client_model", parameterToString(localVarOptionals.ClientModel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientUsername.IsSet() {
		localVarQueryParams.Add("client_username", parameterToString(localVarOptionals.ClientUsername.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientOs.IsSet() {
		localVarQueryParams.Add("client_os", parameterToString(localVarOptionals.ClientOs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WlanId.IsSet() {
		localVarQueryParams.Add("wlan_id", parameterToString(localVarOptionals.WlanId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PskId.IsSet() {
		localVarQueryParams.Add("psk_id", parameterToString(localVarOptionals.PskId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PskName.IsSet() {
		localVarQueryParams.Add("psk_name", parameterToString(localVarOptionals.PskName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse200119
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsWirelessApiService searchSiteWirelessClients
Search Wireless Clients  **NOTE**: fuzzy logic can be used with ‘*’, supported filters: mac, hostname, device, os, model. E.g. /clients/search?device&#x3D;Mac*&amp;hostname&#x3D;jerry
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsWirelessApiSearchSiteWirelessClientsOpts - Optional Parameters:
     * @param "Mac" (optional.String) -  partial / full MAC address
     * @param "IpAddress" (optional.String) - 
     * @param "Hostname" (optional.String) -  partial / full hostname
     * @param "Device" (optional.String) -  device type, e.g. Mac, Nvidia, iPhone
     * @param "Os" (optional.String) -  os, e.g. Sierra, Yosemite, Windows 10
     * @param "Model" (optional.String) -  model, e.g. “MBP 15 late 2013”, 6, 6s, “8+ GSM”
     * @param "Ap" (optional.String) -  AP mac where the client has connected to
     * @param "Ssid" (optional.String) - 
     * @param "Text" (optional.String) -  partial / full MAC address, hostname, username, psk_name or ip
     * @param "NacruleId" (optional.String) -  nacrule_id
     * @param "Limit" (optional.Int32) - 
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
@return InlineResponse20043
*/

type SitesClientsWirelessApiSearchSiteWirelessClientsOpts struct {
    Mac optional.String
    IpAddress optional.String
    Hostname optional.String
    Device optional.String
    Os optional.String
    Model optional.String
    Ap optional.String
    Ssid optional.String
    Text optional.String
    NacruleId optional.String
    Limit optional.Int32
    Start optional.Int32
    End optional.Int32
    Duration optional.String
}

func (a *SitesClientsWirelessApiService) SearchSiteWirelessClients(ctx context.Context, siteId string, localVarOptionals *SitesClientsWirelessApiSearchSiteWirelessClientsOpts) (InlineResponse20043, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20043
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/clients/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Mac.IsSet() {
		localVarQueryParams.Add("mac", parameterToString(localVarOptionals.Mac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IpAddress.IsSet() {
		localVarQueryParams.Add("ip_address", parameterToString(localVarOptionals.IpAddress.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Hostname.IsSet() {
		localVarQueryParams.Add("hostname", parameterToString(localVarOptionals.Hostname.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Device.IsSet() {
		localVarQueryParams.Add("device", parameterToString(localVarOptionals.Device.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Os.IsSet() {
		localVarQueryParams.Add("os", parameterToString(localVarOptionals.Os.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {
		localVarQueryParams.Add("model", parameterToString(localVarOptionals.Model.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ap.IsSet() {
		localVarQueryParams.Add("ap", parameterToString(localVarOptionals.Ap.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Text.IsSet() {
		localVarQueryParams.Add("text", parameterToString(localVarOptionals.Text.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NacruleId.IsSet() {
		localVarQueryParams.Add("nacrule_id", parameterToString(localVarOptionals.NacruleId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20043
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
