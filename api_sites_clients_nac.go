
/*
 * Mist API
 *
 * > Version: **2409.1.9** > > Date: **September 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates] (https://www.juniper.net/documentation/us/en/software/mist/api/http/getting-started/how-to-get-started)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 
 *
 * API version: 2409.1.9
 * Contact: tmunzer@juniper.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type SitesClientsNACApiService service
/*
SitesClientsNACApiService countSiteNacClientEvents
Count by Distinct Attributes of NAC Client-Events
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsNACApiCountSiteNacClientEventsOpts - Optional Parameters:
     * @param "Distinct" (optional.Interface of SiteNacClientEventsCountDistinct) - 
     * @param "Type_" (optional.String) -  see [listDeviceEventsDefinitions]($e/Constants%20Events/listNacEventsDefinitions)
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
     * @param "Limit" (optional.Int32) - 
@return InlineResponse20016
*/

type SitesClientsNACApiCountSiteNacClientEventsOpts struct {
    Distinct optional.Interface
    Type_ optional.String
    Start optional.Int32
    End optional.Int32
    Duration optional.String
    Limit optional.Int32
}

func (a *SitesClientsNACApiService) CountSiteNacClientEvents(ctx context.Context, siteId string, localVarOptionals *SitesClientsNACApiCountSiteNacClientEventsOpts) (InlineResponse20016, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20016
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/nac_clients/events/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Distinct.IsSet() {
		localVarQueryParams.Add("distinct", parameterToString(localVarOptionals.Distinct.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsNACApiService countSiteNacClients
Count by Distinct Attributes of NAC Clients
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsNACApiCountSiteNacClientsOpts - Optional Parameters:
     * @param "Distinct" (optional.Interface of Distinct4) -  NAC Policy Rule ID, if matched
     * @param "LastNacruleId" (optional.String) -  NAC Policy Rule ID, if matched
     * @param "NacruleMatched" (optional.Bool) -  NAC Policy Rule Matched
     * @param "AuthType" (optional.String) -  authentication type, e.g. \&quot;eap-tls\&quot;, \&quot;peap-tls\&quot;, \&quot;eap-ttls\&quot;, \&quot;eap-teap\&quot;, \&quot;mab\&quot;, \&quot;psk\&quot;, \&quot;device-auth\&quot;
     * @param "LastVlanId" (optional.String) -  Vlan ID
     * @param "LastNasVendor" (optional.String) -  vendor of NAS device
     * @param "IdpId" (optional.String) -  SSO ID, if present and used
     * @param "LastSsid" (optional.String) -  SSID
     * @param "LastUsername" (optional.String) -  Username presented by the client
     * @param "Timestamp" (optional.Float64) -  start time, in epoch
     * @param "LastAp" (optional.String) -  AP MAC connected to by client
     * @param "Mac" (optional.String) -  MAC address
     * @param "LastStatus" (optional.String) -  Connection status of client i.e “permitted”, “denied, “session_ended”
     * @param "Type_" (optional.String) -  Client type i.e. “wireless”, “wired” etc.
     * @param "MdmComplianceStatus" (optional.String) -  MDM compliancy of client i.e “compliant”, “not compliant”
     * @param "MdmProvider" (optional.String) -  MDM provider of client’s organisation eg “intune”, “jamf”
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
     * @param "Limit" (optional.Int32) - 
     * @param "Page" (optional.Int32) - 
@return InlineResponse20016
*/

type SitesClientsNACApiCountSiteNacClientsOpts struct {
    Distinct optional.Interface
    LastNacruleId optional.String
    NacruleMatched optional.Bool
    AuthType optional.String
    LastVlanId optional.String
    LastNasVendor optional.String
    IdpId optional.String
    LastSsid optional.String
    LastUsername optional.String
    Timestamp optional.Float64
    LastAp optional.String
    Mac optional.String
    LastStatus optional.String
    Type_ optional.String
    MdmComplianceStatus optional.String
    MdmProvider optional.String
    Start optional.Int32
    End optional.Int32
    Duration optional.String
    Limit optional.Int32
    Page optional.Int32
}

func (a *SitesClientsNACApiService) CountSiteNacClients(ctx context.Context, siteId string, localVarOptionals *SitesClientsNACApiCountSiteNacClientsOpts) (InlineResponse20016, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20016
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/nac_clients/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Distinct.IsSet() {
		localVarQueryParams.Add("distinct", parameterToString(localVarOptionals.Distinct.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastNacruleId.IsSet() {
		localVarQueryParams.Add("last_nacrule_id", parameterToString(localVarOptionals.LastNacruleId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NacruleMatched.IsSet() {
		localVarQueryParams.Add("nacrule_matched", parameterToString(localVarOptionals.NacruleMatched.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthType.IsSet() {
		localVarQueryParams.Add("auth_type", parameterToString(localVarOptionals.AuthType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastVlanId.IsSet() {
		localVarQueryParams.Add("last_vlan_id", parameterToString(localVarOptionals.LastVlanId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastNasVendor.IsSet() {
		localVarQueryParams.Add("last_nas_vendor", parameterToString(localVarOptionals.LastNasVendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdpId.IsSet() {
		localVarQueryParams.Add("idp_id", parameterToString(localVarOptionals.IdpId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastSsid.IsSet() {
		localVarQueryParams.Add("last_ssid", parameterToString(localVarOptionals.LastSsid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastUsername.IsSet() {
		localVarQueryParams.Add("last_username", parameterToString(localVarOptionals.LastUsername.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timestamp.IsSet() {
		localVarQueryParams.Add("timestamp", parameterToString(localVarOptionals.Timestamp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastAp.IsSet() {
		localVarQueryParams.Add("last_ap", parameterToString(localVarOptionals.LastAp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mac.IsSet() {
		localVarQueryParams.Add("mac", parameterToString(localVarOptionals.Mac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastStatus.IsSet() {
		localVarQueryParams.Add("last_status", parameterToString(localVarOptionals.LastStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MdmComplianceStatus.IsSet() {
		localVarQueryParams.Add("mdm_compliance_status", parameterToString(localVarOptionals.MdmComplianceStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MdmProvider.IsSet() {
		localVarQueryParams.Add("mdm_provider", parameterToString(localVarOptionals.MdmProvider.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsNACApiService searchSiteNacClientEvents
Search NAC Client Events
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsNACApiSearchSiteNacClientEventsOpts - Optional Parameters:
     * @param "Type_" (optional.String) -  see [listDeviceEventsDefinitions]($e/Constants%20Events/listNacEventsDefinitions)
     * @param "NacruleId" (optional.Interface of string) -  NAC Policy Rule ID, if matched
     * @param "NacruleMatched" (optional.Bool) -  NAC Policy Rule Matched
     * @param "DryrunNacruleId" (optional.String) -  NAC Policy Dry Run Rule ID, if present and matched
     * @param "DryrunNacruleMatched" (optional.Bool) -  True - if dryrun rule present and matched with priority, False - if not matched or not present
     * @param "AuthType" (optional.String) -  authentication type, e.g. \&quot;eap-tls\&quot;, \&quot;peap-tls\&quot;, \&quot;eap-ttls\&quot;, \&quot;eap-teap\&quot;, \&quot;mab\&quot;, \&quot;psk\&quot;, \&quot;device-auth\&quot;
     * @param "Vlan" (optional.Int32) -  Vlan ID
     * @param "NasVendor" (optional.String) -  vendor of NAS device
     * @param "Bssid" (optional.String) -  BSSID
     * @param "IdpId" (optional.Interface of string) -  SSO ID, if present and used
     * @param "IdpRole" (optional.String) -  IDP returned roles/groups for the user
     * @param "IdpUsername" (optional.String) -  Username presented to the Identity Provider
     * @param "RespAttrs" (optional.Interface of []string) -  Radius attributes returned by NAC to NAS Devive
     * @param "Ssid" (optional.String) -  SSID
     * @param "Username" (optional.String) -  Username presented by the client
     * @param "Ap" (optional.String) -  AP MAC
     * @param "RandomMac" (optional.Bool) -  AP random macMAC
     * @param "Mac" (optional.String) -  MAC address
     * @param "Timestamp" (optional.Float64) -  time, in epoch
     * @param "UsermacLabel" (optional.String) -  labels derived from usermac entry
     * @param "Text" (optional.String) -  partial / full MAC address, username, device_mac or ap
     * @param "NasIp" (optional.String) -  IP address of NAS device
     * @param "Sort" (optional.String) -  sort options, ‘-‘ prefix represents DESC order, default is wcid in ASC order
     * @param "IngressVlan" (optional.String) -  vendor specific Vlan ID in radius requests
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
     * @param "Limit" (optional.Int32) - 
@return InlineResponse20037
*/

type SitesClientsNACApiSearchSiteNacClientEventsOpts struct {
    Type_ optional.String
    NacruleId optional.Interface
    NacruleMatched optional.Bool
    DryrunNacruleId optional.String
    DryrunNacruleMatched optional.Bool
    AuthType optional.String
    Vlan optional.Int32
    NasVendor optional.String
    Bssid optional.String
    IdpId optional.Interface
    IdpRole optional.String
    IdpUsername optional.String
    RespAttrs optional.Interface
    Ssid optional.String
    Username optional.String
    Ap optional.String
    RandomMac optional.Bool
    Mac optional.String
    Timestamp optional.Float64
    UsermacLabel optional.String
    Text optional.String
    NasIp optional.String
    Sort optional.String
    IngressVlan optional.String
    Start optional.Int32
    End optional.Int32
    Duration optional.String
    Limit optional.Int32
}

func (a *SitesClientsNACApiService) SearchSiteNacClientEvents(ctx context.Context, siteId string, localVarOptionals *SitesClientsNACApiSearchSiteNacClientEventsOpts) (InlineResponse20037, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20037
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/nac_clients/events/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NacruleId.IsSet() {
		localVarQueryParams.Add("nacrule_id", parameterToString(localVarOptionals.NacruleId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NacruleMatched.IsSet() {
		localVarQueryParams.Add("nacrule_matched", parameterToString(localVarOptionals.NacruleMatched.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DryrunNacruleId.IsSet() {
		localVarQueryParams.Add("dryrun_nacrule_id", parameterToString(localVarOptionals.DryrunNacruleId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DryrunNacruleMatched.IsSet() {
		localVarQueryParams.Add("dryrun_nacrule_matched", parameterToString(localVarOptionals.DryrunNacruleMatched.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthType.IsSet() {
		localVarQueryParams.Add("auth_type", parameterToString(localVarOptionals.AuthType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vlan.IsSet() {
		localVarQueryParams.Add("vlan", parameterToString(localVarOptionals.Vlan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NasVendor.IsSet() {
		localVarQueryParams.Add("nas_vendor", parameterToString(localVarOptionals.NasVendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Bssid.IsSet() {
		localVarQueryParams.Add("bssid", parameterToString(localVarOptionals.Bssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdpId.IsSet() {
		localVarQueryParams.Add("idp_id", parameterToString(localVarOptionals.IdpId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdpRole.IsSet() {
		localVarQueryParams.Add("idp_role", parameterToString(localVarOptionals.IdpRole.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdpUsername.IsSet() {
		localVarQueryParams.Add("idp_username", parameterToString(localVarOptionals.IdpUsername.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RespAttrs.IsSet() {
		localVarQueryParams.Add("resp_attrs", parameterToString(localVarOptionals.RespAttrs.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Username.IsSet() {
		localVarQueryParams.Add("username", parameterToString(localVarOptionals.Username.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ap.IsSet() {
		localVarQueryParams.Add("ap", parameterToString(localVarOptionals.Ap.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RandomMac.IsSet() {
		localVarQueryParams.Add("random_mac", parameterToString(localVarOptionals.RandomMac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mac.IsSet() {
		localVarQueryParams.Add("mac", parameterToString(localVarOptionals.Mac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timestamp.IsSet() {
		localVarQueryParams.Add("timestamp", parameterToString(localVarOptionals.Timestamp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UsermacLabel.IsSet() {
		localVarQueryParams.Add("usermac_label", parameterToString(localVarOptionals.UsermacLabel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Text.IsSet() {
		localVarQueryParams.Add("text", parameterToString(localVarOptionals.Text.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NasIp.IsSet() {
		localVarQueryParams.Add("nas_ip", parameterToString(localVarOptionals.NasIp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IngressVlan.IsSet() {
		localVarQueryParams.Add("ingress_vlan", parameterToString(localVarOptionals.IngressVlan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20037
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
SitesClientsNACApiService searchSiteNacClients
Search Site NAC Clients
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteId
 * @param optional nil or *SitesClientsNACApiSearchSiteNacClientsOpts - Optional Parameters:
     * @param "NacruleId" (optional.String) -  NAC Policy Rule ID, if matched
     * @param "NacruleMatched" (optional.Bool) -  NAC Policy Rule Matched
     * @param "AuthType" (optional.String) -  authentication type, e.g. \&quot;eap-tls\&quot;, \&quot;peap-tls\&quot;, \&quot;eap-ttls\&quot;, \&quot;eap-teap\&quot;, \&quot;mab\&quot;, \&quot;psk\&quot;, \&quot;device-auth\&quot;
     * @param "Vlan" (optional.String) -  Vlan name or ID assigned to the client
     * @param "NasVendor" (optional.String) -  vendor of NAS device
     * @param "IdpId" (optional.String) -  SSO ID, if present and used
     * @param "Ssid" (optional.String) -  SSID
     * @param "Username" (optional.String) -  Username presented by the client
     * @param "Timestamp" (optional.Float64) -  start time, in epoch
     * @param "Ap" (optional.String) -  AP MAC connected to by client
     * @param "Mac" (optional.String) -  MAC address
     * @param "MxedgeId" (optional.String) -  ID of Mist Edge that the client is connected through
     * @param "NacruleName" (optional.String) -  NAC Policy Rule Name matched
     * @param "Status" (optional.String) -  Connection status of client i.e “permitted”, “denied, “session_ended”
     * @param "Type_" (optional.String) -  Client type i.e. “wireless”, “wired” etc.
     * @param "MdmCompliance" (optional.String) -  MDM compliancy of client i.e “compliant”, “not compliant”
     * @param "MdmProvider" (optional.String) -  MDM provider of client’s organisation eg “intune”, “jamf”
     * @param "Sort" (optional.String) -  sort options, ‘-‘ prefix represents DESC order, default is wcid in ASC order
     * @param "IngressVlan" (optional.String) -  vendor specific Vlan ID in radius requests
     * @param "Start" (optional.Int32) -  start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
     * @param "End" (optional.Int32) -  end datetime, can be epoch or relative time like -1d, -2h; now if not specified
     * @param "Duration" (optional.String) -  duration like 7d, 2w
     * @param "Limit" (optional.Int32) - 
     * @param "Page" (optional.Int32) - 
@return InlineResponse20038
*/

type SitesClientsNACApiSearchSiteNacClientsOpts struct {
    NacruleId optional.String
    NacruleMatched optional.Bool
    AuthType optional.String
    Vlan optional.String
    NasVendor optional.String
    IdpId optional.String
    Ssid optional.String
    Username optional.String
    Timestamp optional.Float64
    Ap optional.String
    Mac optional.String
    MxedgeId optional.String
    NacruleName optional.String
    Status optional.String
    Type_ optional.String
    MdmCompliance optional.String
    MdmProvider optional.String
    Sort optional.String
    IngressVlan optional.String
    Start optional.Int32
    End optional.Int32
    Duration optional.String
    Limit optional.Int32
    Page optional.Int32
}

func (a *SitesClientsNACApiService) SearchSiteNacClients(ctx context.Context, siteId string, localVarOptionals *SitesClientsNACApiSearchSiteNacClientsOpts) (InlineResponse20038, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20038
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sites/{site_id}/nac_clients/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", fmt.Sprintf("%v", siteId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.NacruleId.IsSet() {
		localVarQueryParams.Add("nacrule_id", parameterToString(localVarOptionals.NacruleId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NacruleMatched.IsSet() {
		localVarQueryParams.Add("nacrule_matched", parameterToString(localVarOptionals.NacruleMatched.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthType.IsSet() {
		localVarQueryParams.Add("auth_type", parameterToString(localVarOptionals.AuthType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vlan.IsSet() {
		localVarQueryParams.Add("vlan", parameterToString(localVarOptionals.Vlan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NasVendor.IsSet() {
		localVarQueryParams.Add("nas_vendor", parameterToString(localVarOptionals.NasVendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdpId.IsSet() {
		localVarQueryParams.Add("idp_id", parameterToString(localVarOptionals.IdpId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ssid.IsSet() {
		localVarQueryParams.Add("ssid", parameterToString(localVarOptionals.Ssid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Username.IsSet() {
		localVarQueryParams.Add("username", parameterToString(localVarOptionals.Username.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timestamp.IsSet() {
		localVarQueryParams.Add("timestamp", parameterToString(localVarOptionals.Timestamp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ap.IsSet() {
		localVarQueryParams.Add("ap", parameterToString(localVarOptionals.Ap.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mac.IsSet() {
		localVarQueryParams.Add("mac", parameterToString(localVarOptionals.Mac.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MxedgeId.IsSet() {
		localVarQueryParams.Add("mxedge_id", parameterToString(localVarOptionals.MxedgeId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NacruleName.IsSet() {
		localVarQueryParams.Add("nacrule_name", parameterToString(localVarOptionals.NacruleName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MdmCompliance.IsSet() {
		localVarQueryParams.Add("mdm_compliance", parameterToString(localVarOptionals.MdmCompliance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MdmProvider.IsSet() {
		localVarQueryParams.Add("mdm_provider", parameterToString(localVarOptionals.MdmProvider.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IngressVlan.IsSet() {
		localVarQueryParams.Add("ingress_vlan", parameterToString(localVarOptionals.IngressVlan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Duration.IsSet() {
		localVarQueryParams.Add("duration", parameterToString(localVarOptionals.Duration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-CSRFToken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20038
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v InlineResponse429
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
